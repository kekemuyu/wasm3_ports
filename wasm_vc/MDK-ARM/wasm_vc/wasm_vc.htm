<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [wasm_vc\wasm_vc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image wasm_vc\wasm_vc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Mon Jan 16 22:57:37 2023
<BR><P>
<H3>Maximum Stack Usage =      21544 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ParseSection_Global &rArr; Parse_InitExpr &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2d9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[34f]">CopyStackSlotsR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[34f]">CopyStackSlotsR</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[86]">Compile_Branch</a> from m3_compile.o(.text.Compile_Branch) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[87]">Compile_BranchTable</a> from m3_compile.o(.text.Compile_BranchTable) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[89]">Compile_Call</a> from m3_compile.o(.text.Compile_Call) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[8a]">Compile_CallIndirect</a> from m3_compile.o(.text.Compile_CallIndirect) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ce]">Compile_Const_f32</a> from m3_compile.o(.text.Compile_Const_f32) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[cf]">Compile_Const_f64</a> from m3_compile.o(.text.Compile_Const_f64) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[cc]">Compile_Const_i32</a> from m3_compile.o(.text.Compile_Const_i32) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[cd]">Compile_Const_i64</a> from m3_compile.o(.text.Compile_Const_i64) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1cc]">Compile_Convert</a> from m3_compile.o(.text.Compile_Convert) referenced 20 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1cc]">Compile_Convert</a> from m3_compile.o(.text.Compile_Convert) referenced 8 times from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[8b]">Compile_Drop</a> from m3_compile.o(.text.Compile_Drop) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[85]">Compile_End</a> from m3_compile.o(.text.Compile_End) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[22b]">Compile_ExtendedOpcode</a> from m3_compile.o(.text.Compile_ExtendedOpcode) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[8d]">Compile_GetLocal</a> from m3_compile.o(.text.Compile_GetLocal) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[8f]">Compile_GetSetGlobal</a> from m3_compile.o(.text.Compile_GetSetGlobal) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[84]">Compile_If</a> from m3_compile.o(.text.Compile_If) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[92]">Compile_Load_Store</a> from m3_compile.o(.text.Compile_Load_Store) referenced 23 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[83]">Compile_LoopOrBlock</a> from m3_compile.o(.text.Compile_LoopOrBlock) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[24c]">Compile_Memory_CopyFill</a> from m3_compile.o(.text.Compile_Memory_CopyFill) referenced 2 times from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[cb]">Compile_Memory_Grow</a> from m3_compile.o(.text.Compile_Memory_Grow) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ca]">Compile_Memory_Size</a> from m3_compile.o(.text.Compile_Memory_Size) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[82]">Compile_Nop</a> from m3_compile.o(.text.Compile_Nop) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[88]">Compile_Return</a> from m3_compile.o(.text.Compile_Return) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[8c]">Compile_Select</a> from m3_compile.o(.text.Compile_Select) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[8e]">Compile_SetLocal</a> from m3_compile.o(.text.Compile_SetLocal) referenced 2 times from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[81]">Compile_Unreachable</a> from m3_compile.o(.text.Compile_Unreachable) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(.text.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[266]">ParseSection_Code</a> from m3_parse.o(.text.ParseSection_Code) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[25d]">ParseSection_Custom</a> from m3_parse.o(.text.ParseSection_Custom) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[267]">ParseSection_Data</a> from m3_parse.o(.text.ParseSection_Data) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[265]">ParseSection_Element</a> from m3_parse.o(.text.ParseSection_Element) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[263]">ParseSection_Export</a> from m3_parse.o(.text.ParseSection_Export) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[260]">ParseSection_Function</a> from m3_parse.o(.text.ParseSection_Function) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[262]">ParseSection_Global</a> from m3_parse.o(.text.ParseSection_Global) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[25f]">ParseSection_Import</a> from m3_parse.o(.text.ParseSection_Import) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[261]">ParseSection_Memory</a> from m3_parse.o(.text.ParseSection_Memory) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[264]">ParseSection_Start</a> from m3_parse.o(.text.ParseSection_Start) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[25e]">ParseSection_Type</a> from m3_parse.o(.text.ParseSection_Type) referenced from m3_parse.o(.data.ParseModuleSection.s_parsers)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(.text.SVC_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_stm32f1xx.o(.text.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[6b]">_FreeModule</a> from m3_env.o(.text._FreeModule) referenced 2 times from m3_env.o(.text.Runtime_Release)
 <LI><a href="#[47]">__main</a> from __main.o(!!!main) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[49]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[4a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[48]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[4b]">op_Branch</a> from m3_compile.o(.text.op_Branch) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[4b]">op_Branch</a> from m3_compile.o(.text.op_Branch) referenced 2 times from m3_compile.o(.text.CompileElseBlock)
 <LI><a href="#[4b]">op_Branch</a> from m3_compile.o(.text.op_Branch) referenced 2 times from m3_compile.o(.text.EmitPatchingBranch)
 <LI><a href="#[66]">op_Branch</a> from m3_emit.o(.text.op_Branch) referenced 2 times from m3_emit.o(.text.EnsureCodePageNumLines)
 <LI><a href="#[4d]">op_BranchIfPrologue_r</a> from m3_compile.o(.text.op_BranchIfPrologue_r) referenced 4 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[4e]">op_BranchIfPrologue_s</a> from m3_compile.o(.text.op_BranchIfPrologue_s) referenced 4 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[51]">op_BranchIf_r</a> from m3_compile.o(.text.op_BranchIf_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[51]">op_BranchIf_r</a> from m3_compile.o(.text.op_BranchIf_r) referenced 2 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[52]">op_BranchIf_s</a> from m3_compile.o(.text.op_BranchIf_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[52]">op_BranchIf_s</a> from m3_compile.o(.text.op_BranchIf_s) referenced 2 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[54]">op_BranchTable</a> from m3_compile.o(.text.op_BranchTable) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[54]">op_BranchTable</a> from m3_compile.o(.text.op_BranchTable) referenced 2 times from m3_compile.o(.text.Compile_BranchTable)
 <LI><a href="#[55]">op_Call</a> from m3_compile.o(.text.op_Call) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[55]">op_Call</a> from m3_compile.o(.text.op_Call) referenced 2 times from m3_compile.o(.text.Compile_Call)
 <LI><a href="#[55]">op_Call</a> from m3_compile.o(.text.op_Call) referenced 2 times from m3_compile.o(.text.op_Compile)
 <LI><a href="#[57]">op_CallIndirect</a> from m3_compile.o(.text.op_CallIndirect) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[57]">op_CallIndirect</a> from m3_compile.o(.text.op_CallIndirect) referenced 2 times from m3_compile.o(.text.Compile_CallIndirect)
 <LI><a href="#[56]">op_Compile</a> from m3_compile.o(.text.op_Compile) referenced 2 times from m3_compile.o(.text.Compile_Call)
 <LI><a href="#[6a]">op_Const32</a> from m3_compile.o(.text.op_Const32) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[6a]">op_Const32</a> from m3_compile.o(.text.op_Const32) referenced 2 times from m3_compile.o(.text.PushConst)
 <LI><a href="#[69]">op_Const64</a> from m3_compile.o(.text.op_Const64) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[69]">op_Const64</a> from m3_compile.o(.text.op_Const64) referenced 2 times from m3_compile.o(.text.PushConst)
 <LI><a href="#[4f]">op_ContinueLoop</a> from m3_compile.o(.text.op_ContinueLoop) referenced 4 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[4f]">op_ContinueLoop</a> from m3_compile.o(.text.op_ContinueLoop) referenced 2 times from m3_compile.o(.text.Compile_BranchTable)
 <LI><a href="#[50]">op_ContinueLoopIf</a> from m3_compile.o(.text.op_ContinueLoopIf) referenced 2 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[65]">op_CopySlot_32</a> from m3_compile.o(.text.op_CopySlot_32) referenced 2 times from m3_compile.o(.text.CopyStackIndexToSlot)
 <LI><a href="#[65]">op_CopySlot_32</a> from m3_compile.o(.text.op_CopySlot_32) referenced 2 times from m3_compile.o(.text.PreserveArgsAndLocals)
 <LI><a href="#[64]">op_CopySlot_64</a> from m3_compile.o(.text.op_CopySlot_64) referenced 2 times from m3_compile.o(.text.CopyStackIndexToSlot)
 <LI><a href="#[64]">op_CopySlot_64</a> from m3_compile.o(.text.op_CopySlot_64) referenced 2 times from m3_compile.o(.text.PreserveArgsAndLocals)
 <LI><a href="#[4c]">op_Entry</a> from m3_compile.o(.text.op_Entry) referenced 2 times from m3_compile.o(.text.CompileFunction)
 <LI><a href="#[59]">op_GetGlobal_s32</a> from m3_compile.o(.text.op_GetGlobal_s32) referenced 2 times from m3_compile.o(.text.Compile_GetGlobal)
 <LI><a href="#[58]">op_GetGlobal_s64</a> from m3_compile.o(.text.op_GetGlobal_s64) referenced 2 times from m3_compile.o(.text.Compile_GetGlobal)
 <LI><a href="#[5a]">op_If_r</a> from m3_compile.o(.text.op_If_r) referenced 2 times from m3_compile.o(.text.Compile_If)
 <LI><a href="#[5b]">op_If_s</a> from m3_compile.o(.text.op_If_s) referenced 2 times from m3_compile.o(.text.Compile_If)
 <LI><a href="#[5c]">op_Loop</a> from m3_compile.o(.text.op_Loop) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[5c]">op_Loop</a> from m3_compile.o(.text.op_Loop) referenced 2 times from m3_compile.o(.text.Compile_LoopOrBlock)
 <LI><a href="#[5d]">op_MemCopy</a> from m3_compile.o(.text.op_MemCopy) referenced 2 times from m3_compile.o(.text.Compile_Memory_CopyFill)
 <LI><a href="#[5e]">op_MemFill</a> from m3_compile.o(.text.op_MemFill) referenced 2 times from m3_compile.o(.text.Compile_Memory_CopyFill)
 <LI><a href="#[5f]">op_MemGrow</a> from m3_compile.o(.text.op_MemGrow) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[5f]">op_MemGrow</a> from m3_compile.o(.text.op_MemGrow) referenced 2 times from m3_compile.o(.text.Compile_Memory_Grow)
 <LI><a href="#[60]">op_MemSize</a> from m3_compile.o(.text.op_MemSize) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[60]">op_MemSize</a> from m3_compile.o(.text.op_MemSize) referenced 2 times from m3_compile.o(.text.Compile_Memory_Size)
 <LI><a href="#[68]">op_PreserveCopySlot_32</a> from m3_compile.o(.text.op_PreserveCopySlot_32) referenced 2 times from m3_compile.o(.text.PreservedCopyTopSlot)
 <LI><a href="#[67]">op_PreserveCopySlot_64</a> from m3_compile.o(.text.op_PreserveCopySlot_64) referenced 2 times from m3_compile.o(.text.PreservedCopyTopSlot)
 <LI><a href="#[24f]">op_PreserveSetSlot_f32</a> from m3_compile.o(.text.op_PreserveSetSlot_f32) referenced from m3_compile.o(.rodata.c_preserveSetSlot)
 <LI><a href="#[250]">op_PreserveSetSlot_f64</a> from m3_compile.o(.text.op_PreserveSetSlot_f64) referenced from m3_compile.o(.rodata.c_preserveSetSlot)
 <LI><a href="#[24d]">op_PreserveSetSlot_i32</a> from m3_compile.o(.text.op_PreserveSetSlot_i32) referenced from m3_compile.o(.rodata.c_preserveSetSlot)
 <LI><a href="#[24e]">op_PreserveSetSlot_i64</a> from m3_compile.o(.text.op_PreserveSetSlot_i64) referenced from m3_compile.o(.rodata.c_preserveSetSlot)
 <LI><a href="#[53]">op_Return</a> from m3_compile.o(.text.op_Return) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[53]">op_Return</a> from m3_compile.o(.text.op_Return) referenced 2 times from m3_compile.o(.text.Compile_Branch)
 <LI><a href="#[53]">op_Return</a> from m3_compile.o(.text.op_Return) referenced 2 times from m3_compile.o(.text.Compile_BranchTable)
 <LI><a href="#[53]">op_Return</a> from m3_compile.o(.text.op_Return) referenced 2 times from m3_compile.o(.text.Compile_End)
 <LI><a href="#[53]">op_Return</a> from m3_compile.o(.text.op_Return) referenced 2 times from m3_compile.o(.text.Compile_Return)
 <LI><a href="#[71]">op_Select_f32_rrs</a> from m3_compile.o(.text.op_Select_f32_rrs) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[72]">op_Select_f32_rsr</a> from m3_compile.o(.text.op_Select_f32_rsr) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[70]">op_Select_f32_rss</a> from m3_compile.o(.text.op_Select_f32_rss) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[6e]">op_Select_f32_srs</a> from m3_compile.o(.text.op_Select_f32_srs) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[6f]">op_Select_f32_ssr</a> from m3_compile.o(.text.op_Select_f32_ssr) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[6d]">op_Select_f32_sss</a> from m3_compile.o(.text.op_Select_f32_sss) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[77]">op_Select_f64_rrs</a> from m3_compile.o(.text.op_Select_f64_rrs) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[78]">op_Select_f64_rsr</a> from m3_compile.o(.text.op_Select_f64_rsr) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[76]">op_Select_f64_rss</a> from m3_compile.o(.text.op_Select_f64_rss) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[74]">op_Select_f64_srs</a> from m3_compile.o(.text.op_Select_f64_srs) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[75]">op_Select_f64_ssr</a> from m3_compile.o(.text.op_Select_f64_ssr) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[73]">op_Select_f64_sss</a> from m3_compile.o(.text.op_Select_f64_sss) referenced from m3_compile.o(.rodata.c_fpSelectOps)
 <LI><a href="#[79]">op_Select_i32_rss</a> from m3_compile.o(.text.op_Select_i32_rss) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7a]">op_Select_i32_srs</a> from m3_compile.o(.text.op_Select_i32_srs) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7b]">op_Select_i32_ssr</a> from m3_compile.o(.text.op_Select_i32_ssr) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7c]">op_Select_i32_sss</a> from m3_compile.o(.text.op_Select_i32_sss) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7d]">op_Select_i64_rss</a> from m3_compile.o(.text.op_Select_i64_rss) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7e]">op_Select_i64_srs</a> from m3_compile.o(.text.op_Select_i64_srs) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[7f]">op_Select_i64_ssr</a> from m3_compile.o(.text.op_Select_i64_ssr) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[80]">op_Select_i64_sss</a> from m3_compile.o(.text.op_Select_i64_sss) referenced from m3_compile.o(.rodata.c_intSelectOps)
 <LI><a href="#[253]">op_SetGlobal_f32</a> from m3_compile.o(.text.op_SetGlobal_f32) referenced from m3_compile.o(.rodata.c_setGlobalOps)
 <LI><a href="#[254]">op_SetGlobal_f64</a> from m3_compile.o(.text.op_SetGlobal_f64) referenced from m3_compile.o(.rodata.c_setGlobalOps)
 <LI><a href="#[251]">op_SetGlobal_i32</a> from m3_compile.o(.text.op_SetGlobal_i32) referenced from m3_compile.o(.rodata.c_setGlobalOps)
 <LI><a href="#[252]">op_SetGlobal_i64</a> from m3_compile.o(.text.op_SetGlobal_i64) referenced from m3_compile.o(.rodata.c_setGlobalOps)
 <LI><a href="#[62]">op_SetGlobal_s32</a> from m3_compile.o(.text.op_SetGlobal_s32) referenced 2 times from m3_compile.o(.text.Compile_SetGlobal)
 <LI><a href="#[61]">op_SetGlobal_s64</a> from m3_compile.o(.text.op_SetGlobal_s64) referenced 2 times from m3_compile.o(.text.Compile_SetGlobal)
 <LI><a href="#[257]">op_SetRegister_f32</a> from m3_compile.o(.text.op_SetRegister_f32) referenced from m3_compile.o(.rodata.c_setRegisterOps)
 <LI><a href="#[258]">op_SetRegister_f64</a> from m3_compile.o(.text.op_SetRegister_f64) referenced from m3_compile.o(.rodata.c_setRegisterOps)
 <LI><a href="#[255]">op_SetRegister_i32</a> from m3_compile.o(.text.op_SetRegister_i32) referenced from m3_compile.o(.rodata.c_setRegisterOps)
 <LI><a href="#[256]">op_SetRegister_i64</a> from m3_compile.o(.text.op_SetRegister_i64) referenced from m3_compile.o(.rodata.c_setRegisterOps)
 <LI><a href="#[25b]">op_SetSlot_f32</a> from m3_compile.o(.text.op_SetSlot_f32) referenced from m3_compile.o(.rodata.c_setSetOps)
 <LI><a href="#[25c]">op_SetSlot_f64</a> from m3_compile.o(.text.op_SetSlot_f64) referenced from m3_compile.o(.rodata.c_setSetOps)
 <LI><a href="#[259]">op_SetSlot_i32</a> from m3_compile.o(.text.op_SetSlot_i32) referenced from m3_compile.o(.rodata.c_setSetOps)
 <LI><a href="#[25a]">op_SetSlot_i64</a> from m3_compile.o(.text.op_SetSlot_i64) referenced from m3_compile.o(.rodata.c_setSetOps)
 <LI><a href="#[63]">op_Unreachable</a> from m3_compile.o(.text.op_Unreachable) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[63]">op_Unreachable</a> from m3_compile.o(.text.op_Unreachable) referenced 2 times from m3_compile.o(.text.Compile_Unreachable)
 <LI><a href="#[188]">op_f32_Abs_r</a> from m3_compile.o(.text.op_f32_Abs_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[189]">op_f32_Abs_s</a> from m3_compile.o(.text.op_f32_Abs_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[196]">op_f32_Add_rs</a> from m3_compile.o(.text.op_f32_Add_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[197]">op_f32_Add_ss</a> from m3_compile.o(.text.op_f32_Add_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18c]">op_f32_Ceil_r</a> from m3_compile.o(.text.op_f32_Ceil_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18d]">op_f32_Ceil_s</a> from m3_compile.o(.text.op_f32_Ceil_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ed]">op_f32_Convert_i32_r_r</a> from m3_compile.o(.text.op_f32_Convert_i32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ee]">op_f32_Convert_i32_r_s</a> from m3_compile.o(.text.op_f32_Convert_i32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ef]">op_f32_Convert_i32_s_r</a> from m3_compile.o(.text.op_f32_Convert_i32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f0]">op_f32_Convert_i32_s_s</a> from m3_compile.o(.text.op_f32_Convert_i32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f5]">op_f32_Convert_i64_r_r</a> from m3_compile.o(.text.op_f32_Convert_i64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f6]">op_f32_Convert_i64_r_s</a> from m3_compile.o(.text.op_f32_Convert_i64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f7]">op_f32_Convert_i64_s_r</a> from m3_compile.o(.text.op_f32_Convert_i64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f8]">op_f32_Convert_i64_s_s</a> from m3_compile.o(.text.op_f32_Convert_i64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f1]">op_f32_Convert_u32_r_r</a> from m3_compile.o(.text.op_f32_Convert_u32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f2]">op_f32_Convert_u32_r_s</a> from m3_compile.o(.text.op_f32_Convert_u32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f3]">op_f32_Convert_u32_s_r</a> from m3_compile.o(.text.op_f32_Convert_u32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f4]">op_f32_Convert_u32_s_s</a> from m3_compile.o(.text.op_f32_Convert_u32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1f9]">op_f32_Convert_u64_r_r</a> from m3_compile.o(.text.op_f32_Convert_u64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1fa]">op_f32_Convert_u64_r_s</a> from m3_compile.o(.text.op_f32_Convert_u64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1fb]">op_f32_Convert_u64_s_r</a> from m3_compile.o(.text.op_f32_Convert_u64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1fc]">op_f32_Convert_u64_s_s</a> from m3_compile.o(.text.op_f32_Convert_u64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a4]">op_f32_CopySign_rs</a> from m3_compile.o(.text.op_f32_CopySign_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a5]">op_f32_CopySign_sr</a> from m3_compile.o(.text.op_f32_CopySign_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a6]">op_f32_CopySign_ss</a> from m3_compile.o(.text.op_f32_CopySign_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1fd]">op_f32_Demote_f64_r</a> from m3_compile.o(.text.op_f32_Demote_f64_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1fe]">op_f32_Demote_f64_s</a> from m3_compile.o(.text.op_f32_Demote_f64_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19d]">op_f32_Divide_rs</a> from m3_compile.o(.text.op_f32_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19e]">op_f32_Divide_sr</a> from m3_compile.o(.text.op_f32_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19f]">op_f32_Divide_ss</a> from m3_compile.o(.text.op_f32_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10c]">op_f32_Equal_rs</a> from m3_compile.o(.text.op_f32_Equal_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10d]">op_f32_Equal_ss</a> from m3_compile.o(.text.op_f32_Equal_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18e]">op_f32_Floor_r</a> from m3_compile.o(.text.op_f32_Floor_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18f]">op_f32_Floor_s</a> from m3_compile.o(.text.op_f32_Floor_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[119]">op_f32_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_f32_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11a]">op_f32_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_f32_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11b]">op_f32_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_f32_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[113]">op_f32_GreaterThan_rs</a> from m3_compile.o(.text.op_f32_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[114]">op_f32_GreaterThan_sr</a> from m3_compile.o(.text.op_f32_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[115]">op_f32_GreaterThan_ss</a> from m3_compile.o(.text.op_f32_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[116]">op_f32_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_f32_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[117]">op_f32_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_f32_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[118]">op_f32_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_f32_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[110]">op_f32_LessThan_rs</a> from m3_compile.o(.text.op_f32_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[111]">op_f32_LessThan_sr</a> from m3_compile.o(.text.op_f32_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[112]">op_f32_LessThan_ss</a> from m3_compile.o(.text.op_f32_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[95]">op_f32_Load_f32_r</a> from m3_compile.o(.text.op_f32_Load_f32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[96]">op_f32_Load_f32_s</a> from m3_compile.o(.text.op_f32_Load_f32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a2]">op_f32_Max_rs</a> from m3_compile.o(.text.op_f32_Max_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a3]">op_f32_Max_ss</a> from m3_compile.o(.text.op_f32_Max_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a0]">op_f32_Min_rs</a> from m3_compile.o(.text.op_f32_Min_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a1]">op_f32_Min_ss</a> from m3_compile.o(.text.op_f32_Min_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19b]">op_f32_Multiply_rs</a> from m3_compile.o(.text.op_f32_Multiply_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19c]">op_f32_Multiply_ss</a> from m3_compile.o(.text.op_f32_Multiply_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[192]">op_f32_Nearest_r</a> from m3_compile.o(.text.op_f32_Nearest_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[193]">op_f32_Nearest_s</a> from m3_compile.o(.text.op_f32_Nearest_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18a]">op_f32_Negate_r</a> from m3_compile.o(.text.op_f32_Negate_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[18b]">op_f32_Negate_s</a> from m3_compile.o(.text.op_f32_Negate_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10e]">op_f32_NotEqual_rs</a> from m3_compile.o(.text.op_f32_NotEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10f]">op_f32_NotEqual_ss</a> from m3_compile.o(.text.op_f32_NotEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[219]">op_f32_Reinterpret_i32_r_r</a> from m3_compile.o(.text.op_f32_Reinterpret_i32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21a]">op_f32_Reinterpret_i32_r_s</a> from m3_compile.o(.text.op_f32_Reinterpret_i32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21b]">op_f32_Reinterpret_i32_s_r</a> from m3_compile.o(.text.op_f32_Reinterpret_i32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21c]">op_f32_Reinterpret_i32_s_s</a> from m3_compile.o(.text.op_f32_Reinterpret_i32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[194]">op_f32_Sqrt_r</a> from m3_compile.o(.text.op_f32_Sqrt_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[195]">op_f32_Sqrt_s</a> from m3_compile.o(.text.op_f32_Sqrt_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b6]">op_f32_Store_f32_rr</a> from m3_compile.o(.text.op_f32_Store_f32_rr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b3]">op_f32_Store_f32_rs</a> from m3_compile.o(.text.op_f32_Store_f32_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b4]">op_f32_Store_f32_sr</a> from m3_compile.o(.text.op_f32_Store_f32_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b5]">op_f32_Store_f32_ss</a> from m3_compile.o(.text.op_f32_Store_f32_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[198]">op_f32_Subtract_rs</a> from m3_compile.o(.text.op_f32_Subtract_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[199]">op_f32_Subtract_sr</a> from m3_compile.o(.text.op_f32_Subtract_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[19a]">op_f32_Subtract_ss</a> from m3_compile.o(.text.op_f32_Subtract_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[190]">op_f32_Trunc_r</a> from m3_compile.o(.text.op_f32_Trunc_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[191]">op_f32_Trunc_s</a> from m3_compile.o(.text.op_f32_Trunc_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a7]">op_f64_Abs_r</a> from m3_compile.o(.text.op_f64_Abs_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a8]">op_f64_Abs_s</a> from m3_compile.o(.text.op_f64_Abs_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b5]">op_f64_Add_rs</a> from m3_compile.o(.text.op_f64_Add_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b6]">op_f64_Add_ss</a> from m3_compile.o(.text.op_f64_Add_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ab]">op_f64_Ceil_r</a> from m3_compile.o(.text.op_f64_Ceil_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ac]">op_f64_Ceil_s</a> from m3_compile.o(.text.op_f64_Ceil_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ff]">op_f64_Convert_i32_r_r</a> from m3_compile.o(.text.op_f64_Convert_i32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[200]">op_f64_Convert_i32_r_s</a> from m3_compile.o(.text.op_f64_Convert_i32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[201]">op_f64_Convert_i32_s_r</a> from m3_compile.o(.text.op_f64_Convert_i32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[202]">op_f64_Convert_i32_s_s</a> from m3_compile.o(.text.op_f64_Convert_i32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[207]">op_f64_Convert_i64_r_r</a> from m3_compile.o(.text.op_f64_Convert_i64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[208]">op_f64_Convert_i64_r_s</a> from m3_compile.o(.text.op_f64_Convert_i64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[209]">op_f64_Convert_i64_s_r</a> from m3_compile.o(.text.op_f64_Convert_i64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20a]">op_f64_Convert_i64_s_s</a> from m3_compile.o(.text.op_f64_Convert_i64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[203]">op_f64_Convert_u32_r_r</a> from m3_compile.o(.text.op_f64_Convert_u32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[204]">op_f64_Convert_u32_r_s</a> from m3_compile.o(.text.op_f64_Convert_u32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[205]">op_f64_Convert_u32_s_r</a> from m3_compile.o(.text.op_f64_Convert_u32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[206]">op_f64_Convert_u32_s_s</a> from m3_compile.o(.text.op_f64_Convert_u32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20b]">op_f64_Convert_u64_r_r</a> from m3_compile.o(.text.op_f64_Convert_u64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20c]">op_f64_Convert_u64_r_s</a> from m3_compile.o(.text.op_f64_Convert_u64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20d]">op_f64_Convert_u64_s_r</a> from m3_compile.o(.text.op_f64_Convert_u64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20e]">op_f64_Convert_u64_s_s</a> from m3_compile.o(.text.op_f64_Convert_u64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c3]">op_f64_CopySign_rs</a> from m3_compile.o(.text.op_f64_CopySign_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c4]">op_f64_CopySign_sr</a> from m3_compile.o(.text.op_f64_CopySign_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c5]">op_f64_CopySign_ss</a> from m3_compile.o(.text.op_f64_CopySign_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1bc]">op_f64_Divide_rs</a> from m3_compile.o(.text.op_f64_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1bd]">op_f64_Divide_sr</a> from m3_compile.o(.text.op_f64_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1be]">op_f64_Divide_ss</a> from m3_compile.o(.text.op_f64_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11c]">op_f64_Equal_rs</a> from m3_compile.o(.text.op_f64_Equal_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11d]">op_f64_Equal_ss</a> from m3_compile.o(.text.op_f64_Equal_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ad]">op_f64_Floor_r</a> from m3_compile.o(.text.op_f64_Floor_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ae]">op_f64_Floor_s</a> from m3_compile.o(.text.op_f64_Floor_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[129]">op_f64_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_f64_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12a]">op_f64_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_f64_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12b]">op_f64_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_f64_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[123]">op_f64_GreaterThan_rs</a> from m3_compile.o(.text.op_f64_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[124]">op_f64_GreaterThan_sr</a> from m3_compile.o(.text.op_f64_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[125]">op_f64_GreaterThan_ss</a> from m3_compile.o(.text.op_f64_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[126]">op_f64_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_f64_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[127]">op_f64_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_f64_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[128]">op_f64_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_f64_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[120]">op_f64_LessThan_rs</a> from m3_compile.o(.text.op_f64_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[121]">op_f64_LessThan_sr</a> from m3_compile.o(.text.op_f64_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[122]">op_f64_LessThan_ss</a> from m3_compile.o(.text.op_f64_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[97]">op_f64_Load_f64_r</a> from m3_compile.o(.text.op_f64_Load_f64_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[98]">op_f64_Load_f64_s</a> from m3_compile.o(.text.op_f64_Load_f64_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c1]">op_f64_Max_rs</a> from m3_compile.o(.text.op_f64_Max_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c2]">op_f64_Max_ss</a> from m3_compile.o(.text.op_f64_Max_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1bf]">op_f64_Min_rs</a> from m3_compile.o(.text.op_f64_Min_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c0]">op_f64_Min_ss</a> from m3_compile.o(.text.op_f64_Min_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ba]">op_f64_Multiply_rs</a> from m3_compile.o(.text.op_f64_Multiply_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1bb]">op_f64_Multiply_ss</a> from m3_compile.o(.text.op_f64_Multiply_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b1]">op_f64_Nearest_r</a> from m3_compile.o(.text.op_f64_Nearest_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b2]">op_f64_Nearest_s</a> from m3_compile.o(.text.op_f64_Nearest_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1a9]">op_f64_Negate_r</a> from m3_compile.o(.text.op_f64_Negate_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1aa]">op_f64_Negate_s</a> from m3_compile.o(.text.op_f64_Negate_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11e]">op_f64_NotEqual_rs</a> from m3_compile.o(.text.op_f64_NotEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[11f]">op_f64_NotEqual_ss</a> from m3_compile.o(.text.op_f64_NotEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[20f]">op_f64_Promote_f32_r</a> from m3_compile.o(.text.op_f64_Promote_f32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[210]">op_f64_Promote_f32_s</a> from m3_compile.o(.text.op_f64_Promote_f32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21d]">op_f64_Reinterpret_i64_r_r</a> from m3_compile.o(.text.op_f64_Reinterpret_i64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21e]">op_f64_Reinterpret_i64_r_s</a> from m3_compile.o(.text.op_f64_Reinterpret_i64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[21f]">op_f64_Reinterpret_i64_s_r</a> from m3_compile.o(.text.op_f64_Reinterpret_i64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[220]">op_f64_Reinterpret_i64_s_s</a> from m3_compile.o(.text.op_f64_Reinterpret_i64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b3]">op_f64_Sqrt_r</a> from m3_compile.o(.text.op_f64_Sqrt_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b4]">op_f64_Sqrt_s</a> from m3_compile.o(.text.op_f64_Sqrt_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ba]">op_f64_Store_f64_rr</a> from m3_compile.o(.text.op_f64_Store_f64_rr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b7]">op_f64_Store_f64_rs</a> from m3_compile.o(.text.op_f64_Store_f64_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b8]">op_f64_Store_f64_sr</a> from m3_compile.o(.text.op_f64_Store_f64_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b9]">op_f64_Store_f64_ss</a> from m3_compile.o(.text.op_f64_Store_f64_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b7]">op_f64_Subtract_rs</a> from m3_compile.o(.text.op_f64_Subtract_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b8]">op_f64_Subtract_sr</a> from m3_compile.o(.text.op_f64_Subtract_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b9]">op_f64_Subtract_ss</a> from m3_compile.o(.text.op_f64_Subtract_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1af]">op_f64_Trunc_r</a> from m3_compile.o(.text.op_f64_Trunc_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1b0]">op_f64_Trunc_s</a> from m3_compile.o(.text.op_f64_Trunc_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[132]">op_i32_Add_rs</a> from m3_compile.o(.text.op_i32_Add_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[133]">op_i32_Add_ss</a> from m3_compile.o(.text.op_i32_Add_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[139]">op_i32_Divide_rs</a> from m3_compile.o(.text.op_i32_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13a]">op_i32_Divide_sr</a> from m3_compile.o(.text.op_i32_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13b]">op_i32_Divide_ss</a> from m3_compile.o(.text.op_i32_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d0]">op_i32_EqualToZero_r</a> from m3_compile.o(.text.op_i32_EqualToZero_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d1]">op_i32_EqualToZero_s</a> from m3_compile.o(.text.op_i32_EqualToZero_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d2]">op_i32_Equal_rs</a> from m3_compile.o(.text.op_i32_Equal_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d3]">op_i32_Equal_ss</a> from m3_compile.o(.text.op_i32_Equal_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[223]">op_i32_Extend16_s_r</a> from m3_compile.o(.text.op_i32_Extend16_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[224]">op_i32_Extend16_s_s</a> from m3_compile.o(.text.op_i32_Extend16_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[221]">op_i32_Extend8_s_r</a> from m3_compile.o(.text.op_i32_Extend8_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[222]">op_i32_Extend8_s_s</a> from m3_compile.o(.text.op_i32_Extend8_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e8]">op_i32_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_i32_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e9]">op_i32_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_i32_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ea]">op_i32_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_i32_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[dc]">op_i32_GreaterThan_rs</a> from m3_compile.o(.text.op_i32_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[dd]">op_i32_GreaterThan_sr</a> from m3_compile.o(.text.op_i32_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[de]">op_i32_GreaterThan_ss</a> from m3_compile.o(.text.op_i32_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e2]">op_i32_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_i32_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e3]">op_i32_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_i32_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e4]">op_i32_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_i32_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d6]">op_i32_LessThan_rs</a> from m3_compile.o(.text.op_i32_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d7]">op_i32_LessThan_sr</a> from m3_compile.o(.text.op_i32_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d8]">op_i32_LessThan_ss</a> from m3_compile.o(.text.op_i32_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9d]">op_i32_Load_i16_r</a> from m3_compile.o(.text.op_i32_Load_i16_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9e]">op_i32_Load_i16_s</a> from m3_compile.o(.text.op_i32_Load_i16_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[90]">op_i32_Load_i32_r</a> from m3_compile.o(.text.op_i32_Load_i32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[91]">op_i32_Load_i32_s</a> from m3_compile.o(.text.op_i32_Load_i32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[99]">op_i32_Load_i8_r</a> from m3_compile.o(.text.op_i32_Load_i8_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9a]">op_i32_Load_i8_s</a> from m3_compile.o(.text.op_i32_Load_i8_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9f]">op_i32_Load_u16_r</a> from m3_compile.o(.text.op_i32_Load_u16_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a0]">op_i32_Load_u16_s</a> from m3_compile.o(.text.op_i32_Load_u16_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9b]">op_i32_Load_u8_r</a> from m3_compile.o(.text.op_i32_Load_u8_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[9c]">op_i32_Load_u8_s</a> from m3_compile.o(.text.op_i32_Load_u8_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[137]">op_i32_Multiply_rs</a> from m3_compile.o(.text.op_i32_Multiply_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[138]">op_i32_Multiply_ss</a> from m3_compile.o(.text.op_i32_Multiply_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d4]">op_i32_NotEqual_rs</a> from m3_compile.o(.text.op_i32_NotEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d5]">op_i32_NotEqual_ss</a> from m3_compile.o(.text.op_i32_NotEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[211]">op_i32_Reinterpret_f32_r_r</a> from m3_compile.o(.text.op_i32_Reinterpret_f32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[212]">op_i32_Reinterpret_f32_r_s</a> from m3_compile.o(.text.op_i32_Reinterpret_f32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[213]">op_i32_Reinterpret_f32_s_r</a> from m3_compile.o(.text.op_i32_Reinterpret_f32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[214]">op_i32_Reinterpret_f32_s_s</a> from m3_compile.o(.text.op_i32_Reinterpret_f32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13f]">op_i32_Remainder_rs</a> from m3_compile.o(.text.op_i32_Remainder_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[140]">op_i32_Remainder_sr</a> from m3_compile.o(.text.op_i32_Remainder_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[141]">op_i32_Remainder_ss</a> from m3_compile.o(.text.op_i32_Remainder_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14e]">op_i32_ShiftRight_rs</a> from m3_compile.o(.text.op_i32_ShiftRight_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14f]">op_i32_ShiftRight_sr</a> from m3_compile.o(.text.op_i32_ShiftRight_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[150]">op_i32_ShiftRight_ss</a> from m3_compile.o(.text.op_i32_ShiftRight_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[be]">op_i32_Store_i16_rs</a> from m3_compile.o(.text.op_i32_Store_i16_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[bf]">op_i32_Store_i16_sr</a> from m3_compile.o(.text.op_i32_Store_i16_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c0]">op_i32_Store_i16_ss</a> from m3_compile.o(.text.op_i32_Store_i16_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ad]">op_i32_Store_i32_rs</a> from m3_compile.o(.text.op_i32_Store_i32_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ae]">op_i32_Store_i32_sr</a> from m3_compile.o(.text.op_i32_Store_i32_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[af]">op_i32_Store_i32_ss</a> from m3_compile.o(.text.op_i32_Store_i32_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[bb]">op_i32_Store_u8_rs</a> from m3_compile.o(.text.op_i32_Store_u8_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[bc]">op_i32_Store_u8_sr</a> from m3_compile.o(.text.op_i32_Store_u8_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[bd]">op_i32_Store_u8_ss</a> from m3_compile.o(.text.op_i32_Store_u8_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[134]">op_i32_Subtract_rs</a> from m3_compile.o(.text.op_i32_Subtract_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[135]">op_i32_Subtract_sr</a> from m3_compile.o(.text.op_i32_Subtract_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[136]">op_i32_Subtract_ss</a> from m3_compile.o(.text.op_i32_Subtract_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[22c]">op_i32_TruncSat_f32_r_r</a> from m3_compile.o(.text.op_i32_TruncSat_f32_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[22d]">op_i32_TruncSat_f32_r_s</a> from m3_compile.o(.text.op_i32_TruncSat_f32_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[22e]">op_i32_TruncSat_f32_s_r</a> from m3_compile.o(.text.op_i32_TruncSat_f32_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[22f]">op_i32_TruncSat_f32_s_s</a> from m3_compile.o(.text.op_i32_TruncSat_f32_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[234]">op_i32_TruncSat_f64_r_r</a> from m3_compile.o(.text.op_i32_TruncSat_f64_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[235]">op_i32_TruncSat_f64_r_s</a> from m3_compile.o(.text.op_i32_TruncSat_f64_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[236]">op_i32_TruncSat_f64_s_r</a> from m3_compile.o(.text.op_i32_TruncSat_f64_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[237]">op_i32_TruncSat_f64_s_s</a> from m3_compile.o(.text.op_i32_TruncSat_f64_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[1c8]">op_i32_Trunc_f32_r_r</a> from m3_compile.o(.text.op_i32_Trunc_f32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c9]">op_i32_Trunc_f32_r_s</a> from m3_compile.o(.text.op_i32_Trunc_f32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ca]">op_i32_Trunc_f32_s_r</a> from m3_compile.o(.text.op_i32_Trunc_f32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1cb]">op_i32_Trunc_f32_s_s</a> from m3_compile.o(.text.op_i32_Trunc_f32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d1]">op_i32_Trunc_f64_r_r</a> from m3_compile.o(.text.op_i32_Trunc_f64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d2]">op_i32_Trunc_f64_r_s</a> from m3_compile.o(.text.op_i32_Trunc_f64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d3]">op_i32_Trunc_f64_s_r</a> from m3_compile.o(.text.op_i32_Trunc_f64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d4]">op_i32_Trunc_f64_s_s</a> from m3_compile.o(.text.op_i32_Trunc_f64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c6]">op_i32_Wrap_i64_r</a> from m3_compile.o(.text.op_i32_Wrap_i64_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1c7]">op_i32_Wrap_i64_s</a> from m3_compile.o(.text.op_i32_Wrap_i64_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[160]">op_i64_Add_rs</a> from m3_compile.o(.text.op_i64_Add_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[161]">op_i64_Add_ss</a> from m3_compile.o(.text.op_i64_Add_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[167]">op_i64_Divide_rs</a> from m3_compile.o(.text.op_i64_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[168]">op_i64_Divide_sr</a> from m3_compile.o(.text.op_i64_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[169]">op_i64_Divide_ss</a> from m3_compile.o(.text.op_i64_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ee]">op_i64_EqualToZero_r</a> from m3_compile.o(.text.op_i64_EqualToZero_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ef]">op_i64_EqualToZero_s</a> from m3_compile.o(.text.op_i64_EqualToZero_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f0]">op_i64_Equal_rs</a> from m3_compile.o(.text.op_i64_Equal_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f1]">op_i64_Equal_ss</a> from m3_compile.o(.text.op_i64_Equal_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[227]">op_i64_Extend16_s_r</a> from m3_compile.o(.text.op_i64_Extend16_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[228]">op_i64_Extend16_s_s</a> from m3_compile.o(.text.op_i64_Extend16_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[229]">op_i64_Extend32_s_r</a> from m3_compile.o(.text.op_i64_Extend32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[22a]">op_i64_Extend32_s_s</a> from m3_compile.o(.text.op_i64_Extend32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[225]">op_i64_Extend8_s_r</a> from m3_compile.o(.text.op_i64_Extend8_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[226]">op_i64_Extend8_s_s</a> from m3_compile.o(.text.op_i64_Extend8_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d9]">op_i64_Extend_i32_r</a> from m3_compile.o(.text.op_i64_Extend_i32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1da]">op_i64_Extend_i32_s</a> from m3_compile.o(.text.op_i64_Extend_i32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1db]">op_i64_Extend_u32_r</a> from m3_compile.o(.text.op_i64_Extend_u32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1dc]">op_i64_Extend_u32_s</a> from m3_compile.o(.text.op_i64_Extend_u32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[106]">op_i64_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_i64_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[107]">op_i64_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_i64_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[108]">op_i64_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_i64_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[fa]">op_i64_GreaterThan_rs</a> from m3_compile.o(.text.op_i64_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[fb]">op_i64_GreaterThan_sr</a> from m3_compile.o(.text.op_i64_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[fc]">op_i64_GreaterThan_ss</a> from m3_compile.o(.text.op_i64_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[100]">op_i64_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_i64_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[101]">op_i64_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_i64_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[102]">op_i64_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_i64_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f4]">op_i64_LessThan_rs</a> from m3_compile.o(.text.op_i64_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f5]">op_i64_LessThan_sr</a> from m3_compile.o(.text.op_i64_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f6]">op_i64_LessThan_ss</a> from m3_compile.o(.text.op_i64_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a5]">op_i64_Load_i16_r</a> from m3_compile.o(.text.op_i64_Load_i16_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a6]">op_i64_Load_i16_s</a> from m3_compile.o(.text.op_i64_Load_i16_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a9]">op_i64_Load_i32_r</a> from m3_compile.o(.text.op_i64_Load_i32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[aa]">op_i64_Load_i32_s</a> from m3_compile.o(.text.op_i64_Load_i32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[93]">op_i64_Load_i64_r</a> from m3_compile.o(.text.op_i64_Load_i64_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[94]">op_i64_Load_i64_s</a> from m3_compile.o(.text.op_i64_Load_i64_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a1]">op_i64_Load_i8_r</a> from m3_compile.o(.text.op_i64_Load_i8_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a2]">op_i64_Load_i8_s</a> from m3_compile.o(.text.op_i64_Load_i8_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a7]">op_i64_Load_u16_r</a> from m3_compile.o(.text.op_i64_Load_u16_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a8]">op_i64_Load_u16_s</a> from m3_compile.o(.text.op_i64_Load_u16_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ab]">op_i64_Load_u32_r</a> from m3_compile.o(.text.op_i64_Load_u32_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ac]">op_i64_Load_u32_s</a> from m3_compile.o(.text.op_i64_Load_u32_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a3]">op_i64_Load_u8_r</a> from m3_compile.o(.text.op_i64_Load_u8_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[a4]">op_i64_Load_u8_s</a> from m3_compile.o(.text.op_i64_Load_u8_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[165]">op_i64_Multiply_rs</a> from m3_compile.o(.text.op_i64_Multiply_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[166]">op_i64_Multiply_ss</a> from m3_compile.o(.text.op_i64_Multiply_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f2]">op_i64_NotEqual_rs</a> from m3_compile.o(.text.op_i64_NotEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f3]">op_i64_NotEqual_ss</a> from m3_compile.o(.text.op_i64_NotEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[215]">op_i64_Reinterpret_f64_r_r</a> from m3_compile.o(.text.op_i64_Reinterpret_f64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[216]">op_i64_Reinterpret_f64_r_s</a> from m3_compile.o(.text.op_i64_Reinterpret_f64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[217]">op_i64_Reinterpret_f64_s_r</a> from m3_compile.o(.text.op_i64_Reinterpret_f64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[218]">op_i64_Reinterpret_f64_s_s</a> from m3_compile.o(.text.op_i64_Reinterpret_f64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16d]">op_i64_Remainder_rs</a> from m3_compile.o(.text.op_i64_Remainder_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16e]">op_i64_Remainder_sr</a> from m3_compile.o(.text.op_i64_Remainder_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16f]">op_i64_Remainder_ss</a> from m3_compile.o(.text.op_i64_Remainder_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17c]">op_i64_ShiftRight_rs</a> from m3_compile.o(.text.op_i64_ShiftRight_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17d]">op_i64_ShiftRight_sr</a> from m3_compile.o(.text.op_i64_ShiftRight_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17e]">op_i64_ShiftRight_ss</a> from m3_compile.o(.text.op_i64_ShiftRight_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c4]">op_i64_Store_i16_rs</a> from m3_compile.o(.text.op_i64_Store_i16_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c5]">op_i64_Store_i16_sr</a> from m3_compile.o(.text.op_i64_Store_i16_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c6]">op_i64_Store_i16_ss</a> from m3_compile.o(.text.op_i64_Store_i16_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c7]">op_i64_Store_i32_rs</a> from m3_compile.o(.text.op_i64_Store_i32_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c8]">op_i64_Store_i32_sr</a> from m3_compile.o(.text.op_i64_Store_i32_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c9]">op_i64_Store_i32_ss</a> from m3_compile.o(.text.op_i64_Store_i32_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b0]">op_i64_Store_i64_rs</a> from m3_compile.o(.text.op_i64_Store_i64_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b1]">op_i64_Store_i64_sr</a> from m3_compile.o(.text.op_i64_Store_i64_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[b2]">op_i64_Store_i64_ss</a> from m3_compile.o(.text.op_i64_Store_i64_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c1]">op_i64_Store_u8_rs</a> from m3_compile.o(.text.op_i64_Store_u8_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c2]">op_i64_Store_u8_sr</a> from m3_compile.o(.text.op_i64_Store_u8_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[c3]">op_i64_Store_u8_ss</a> from m3_compile.o(.text.op_i64_Store_u8_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[162]">op_i64_Subtract_rs</a> from m3_compile.o(.text.op_i64_Subtract_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[163]">op_i64_Subtract_sr</a> from m3_compile.o(.text.op_i64_Subtract_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[164]">op_i64_Subtract_ss</a> from m3_compile.o(.text.op_i64_Subtract_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[23c]">op_i64_TruncSat_f32_r_r</a> from m3_compile.o(.text.op_i64_TruncSat_f32_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[23d]">op_i64_TruncSat_f32_r_s</a> from m3_compile.o(.text.op_i64_TruncSat_f32_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[23e]">op_i64_TruncSat_f32_s_r</a> from m3_compile.o(.text.op_i64_TruncSat_f32_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[23f]">op_i64_TruncSat_f32_s_s</a> from m3_compile.o(.text.op_i64_TruncSat_f32_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[244]">op_i64_TruncSat_f64_r_r</a> from m3_compile.o(.text.op_i64_TruncSat_f64_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[245]">op_i64_TruncSat_f64_r_s</a> from m3_compile.o(.text.op_i64_TruncSat_f64_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[246]">op_i64_TruncSat_f64_s_r</a> from m3_compile.o(.text.op_i64_TruncSat_f64_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[247]">op_i64_TruncSat_f64_s_s</a> from m3_compile.o(.text.op_i64_TruncSat_f64_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[1dd]">op_i64_Trunc_f32_r_r</a> from m3_compile.o(.text.op_i64_Trunc_f32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1de]">op_i64_Trunc_f32_r_s</a> from m3_compile.o(.text.op_i64_Trunc_f32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1df]">op_i64_Trunc_f32_s_r</a> from m3_compile.o(.text.op_i64_Trunc_f32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e0]">op_i64_Trunc_f32_s_s</a> from m3_compile.o(.text.op_i64_Trunc_f32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e5]">op_i64_Trunc_f64_r_r</a> from m3_compile.o(.text.op_i64_Trunc_f64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e6]">op_i64_Trunc_f64_r_s</a> from m3_compile.o(.text.op_i64_Trunc_f64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e7]">op_i64_Trunc_f64_s_r</a> from m3_compile.o(.text.op_i64_Trunc_f64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e8]">op_i64_Trunc_f64_s_s</a> from m3_compile.o(.text.op_i64_Trunc_f64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[145]">op_u32_And_rs</a> from m3_compile.o(.text.op_u32_And_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[146]">op_u32_And_ss</a> from m3_compile.o(.text.op_u32_And_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12c]">op_u32_Clz_r</a> from m3_compile.o(.text.op_u32_Clz_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12d]">op_u32_Clz_s</a> from m3_compile.o(.text.op_u32_Clz_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12e]">op_u32_Ctz_r</a> from m3_compile.o(.text.op_u32_Ctz_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[12f]">op_u32_Ctz_s</a> from m3_compile.o(.text.op_u32_Ctz_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13c]">op_u32_Divide_rs</a> from m3_compile.o(.text.op_u32_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13d]">op_u32_Divide_sr</a> from m3_compile.o(.text.op_u32_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[13e]">op_u32_Divide_ss</a> from m3_compile.o(.text.op_u32_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[eb]">op_u32_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_u32_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ec]">op_u32_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_u32_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ed]">op_u32_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_u32_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[df]">op_u32_GreaterThan_rs</a> from m3_compile.o(.text.op_u32_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e0]">op_u32_GreaterThan_sr</a> from m3_compile.o(.text.op_u32_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e1]">op_u32_GreaterThan_ss</a> from m3_compile.o(.text.op_u32_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e5]">op_u32_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_u32_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e6]">op_u32_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_u32_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[e7]">op_u32_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_u32_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[d9]">op_u32_LessThan_rs</a> from m3_compile.o(.text.op_u32_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[da]">op_u32_LessThan_sr</a> from m3_compile.o(.text.op_u32_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[db]">op_u32_LessThan_ss</a> from m3_compile.o(.text.op_u32_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[147]">op_u32_Or_rs</a> from m3_compile.o(.text.op_u32_Or_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[148]">op_u32_Or_ss</a> from m3_compile.o(.text.op_u32_Or_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[130]">op_u32_Popcnt_r</a> from m3_compile.o(.text.op_u32_Popcnt_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[131]">op_u32_Popcnt_s</a> from m3_compile.o(.text.op_u32_Popcnt_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[142]">op_u32_Remainder_rs</a> from m3_compile.o(.text.op_u32_Remainder_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[143]">op_u32_Remainder_sr</a> from m3_compile.o(.text.op_u32_Remainder_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[144]">op_u32_Remainder_ss</a> from m3_compile.o(.text.op_u32_Remainder_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[154]">op_u32_Rotl_rs</a> from m3_compile.o(.text.op_u32_Rotl_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[155]">op_u32_Rotl_sr</a> from m3_compile.o(.text.op_u32_Rotl_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[156]">op_u32_Rotl_ss</a> from m3_compile.o(.text.op_u32_Rotl_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[157]">op_u32_Rotr_rs</a> from m3_compile.o(.text.op_u32_Rotr_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[158]">op_u32_Rotr_sr</a> from m3_compile.o(.text.op_u32_Rotr_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[159]">op_u32_Rotr_ss</a> from m3_compile.o(.text.op_u32_Rotr_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14b]">op_u32_ShiftLeft_rs</a> from m3_compile.o(.text.op_u32_ShiftLeft_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14c]">op_u32_ShiftLeft_sr</a> from m3_compile.o(.text.op_u32_ShiftLeft_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14d]">op_u32_ShiftLeft_ss</a> from m3_compile.o(.text.op_u32_ShiftLeft_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[151]">op_u32_ShiftRight_rs</a> from m3_compile.o(.text.op_u32_ShiftRight_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[152]">op_u32_ShiftRight_sr</a> from m3_compile.o(.text.op_u32_ShiftRight_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[153]">op_u32_ShiftRight_ss</a> from m3_compile.o(.text.op_u32_ShiftRight_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[230]">op_u32_TruncSat_f32_r_r</a> from m3_compile.o(.text.op_u32_TruncSat_f32_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[231]">op_u32_TruncSat_f32_r_s</a> from m3_compile.o(.text.op_u32_TruncSat_f32_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[232]">op_u32_TruncSat_f32_s_r</a> from m3_compile.o(.text.op_u32_TruncSat_f32_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[233]">op_u32_TruncSat_f32_s_s</a> from m3_compile.o(.text.op_u32_TruncSat_f32_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[238]">op_u32_TruncSat_f64_r_r</a> from m3_compile.o(.text.op_u32_TruncSat_f64_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[239]">op_u32_TruncSat_f64_r_s</a> from m3_compile.o(.text.op_u32_TruncSat_f64_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[23a]">op_u32_TruncSat_f64_s_r</a> from m3_compile.o(.text.op_u32_TruncSat_f64_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[23b]">op_u32_TruncSat_f64_s_s</a> from m3_compile.o(.text.op_u32_TruncSat_f64_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[1cd]">op_u32_Trunc_f32_r_r</a> from m3_compile.o(.text.op_u32_Trunc_f32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ce]">op_u32_Trunc_f32_r_s</a> from m3_compile.o(.text.op_u32_Trunc_f32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1cf]">op_u32_Trunc_f32_s_r</a> from m3_compile.o(.text.op_u32_Trunc_f32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d0]">op_u32_Trunc_f32_s_s</a> from m3_compile.o(.text.op_u32_Trunc_f32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d5]">op_u32_Trunc_f64_r_r</a> from m3_compile.o(.text.op_u32_Trunc_f64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d6]">op_u32_Trunc_f64_r_s</a> from m3_compile.o(.text.op_u32_Trunc_f64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d7]">op_u32_Trunc_f64_s_r</a> from m3_compile.o(.text.op_u32_Trunc_f64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1d8]">op_u32_Trunc_f64_s_s</a> from m3_compile.o(.text.op_u32_Trunc_f64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[149]">op_u32_Xor_rs</a> from m3_compile.o(.text.op_u32_Xor_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[14a]">op_u32_Xor_ss</a> from m3_compile.o(.text.op_u32_Xor_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[173]">op_u64_And_rs</a> from m3_compile.o(.text.op_u64_And_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[174]">op_u64_And_ss</a> from m3_compile.o(.text.op_u64_And_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15a]">op_u64_Clz_r</a> from m3_compile.o(.text.op_u64_Clz_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15b]">op_u64_Clz_s</a> from m3_compile.o(.text.op_u64_Clz_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15c]">op_u64_Ctz_r</a> from m3_compile.o(.text.op_u64_Ctz_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15d]">op_u64_Ctz_s</a> from m3_compile.o(.text.op_u64_Ctz_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16a]">op_u64_Divide_rs</a> from m3_compile.o(.text.op_u64_Divide_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16b]">op_u64_Divide_sr</a> from m3_compile.o(.text.op_u64_Divide_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[16c]">op_u64_Divide_ss</a> from m3_compile.o(.text.op_u64_Divide_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[109]">op_u64_GreaterThanOrEqual_rs</a> from m3_compile.o(.text.op_u64_GreaterThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10a]">op_u64_GreaterThanOrEqual_sr</a> from m3_compile.o(.text.op_u64_GreaterThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[10b]">op_u64_GreaterThanOrEqual_ss</a> from m3_compile.o(.text.op_u64_GreaterThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[fd]">op_u64_GreaterThan_rs</a> from m3_compile.o(.text.op_u64_GreaterThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[fe]">op_u64_GreaterThan_sr</a> from m3_compile.o(.text.op_u64_GreaterThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[ff]">op_u64_GreaterThan_ss</a> from m3_compile.o(.text.op_u64_GreaterThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[103]">op_u64_LessThanOrEqual_rs</a> from m3_compile.o(.text.op_u64_LessThanOrEqual_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[104]">op_u64_LessThanOrEqual_sr</a> from m3_compile.o(.text.op_u64_LessThanOrEqual_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[105]">op_u64_LessThanOrEqual_ss</a> from m3_compile.o(.text.op_u64_LessThanOrEqual_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f7]">op_u64_LessThan_rs</a> from m3_compile.o(.text.op_u64_LessThan_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f8]">op_u64_LessThan_sr</a> from m3_compile.o(.text.op_u64_LessThan_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[f9]">op_u64_LessThan_ss</a> from m3_compile.o(.text.op_u64_LessThan_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[175]">op_u64_Or_rs</a> from m3_compile.o(.text.op_u64_Or_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[176]">op_u64_Or_ss</a> from m3_compile.o(.text.op_u64_Or_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15e]">op_u64_Popcnt_r</a> from m3_compile.o(.text.op_u64_Popcnt_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[15f]">op_u64_Popcnt_s</a> from m3_compile.o(.text.op_u64_Popcnt_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[170]">op_u64_Remainder_rs</a> from m3_compile.o(.text.op_u64_Remainder_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[171]">op_u64_Remainder_sr</a> from m3_compile.o(.text.op_u64_Remainder_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[172]">op_u64_Remainder_ss</a> from m3_compile.o(.text.op_u64_Remainder_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[182]">op_u64_Rotl_rs</a> from m3_compile.o(.text.op_u64_Rotl_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[183]">op_u64_Rotl_sr</a> from m3_compile.o(.text.op_u64_Rotl_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[184]">op_u64_Rotl_ss</a> from m3_compile.o(.text.op_u64_Rotl_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[185]">op_u64_Rotr_rs</a> from m3_compile.o(.text.op_u64_Rotr_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[186]">op_u64_Rotr_sr</a> from m3_compile.o(.text.op_u64_Rotr_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[187]">op_u64_Rotr_ss</a> from m3_compile.o(.text.op_u64_Rotr_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[179]">op_u64_ShiftLeft_rs</a> from m3_compile.o(.text.op_u64_ShiftLeft_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17a]">op_u64_ShiftLeft_sr</a> from m3_compile.o(.text.op_u64_ShiftLeft_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17b]">op_u64_ShiftLeft_ss</a> from m3_compile.o(.text.op_u64_ShiftLeft_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[17f]">op_u64_ShiftRight_rs</a> from m3_compile.o(.text.op_u64_ShiftRight_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[180]">op_u64_ShiftRight_sr</a> from m3_compile.o(.text.op_u64_ShiftRight_sr) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[181]">op_u64_ShiftRight_ss</a> from m3_compile.o(.text.op_u64_ShiftRight_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[240]">op_u64_TruncSat_f32_r_r</a> from m3_compile.o(.text.op_u64_TruncSat_f32_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[241]">op_u64_TruncSat_f32_r_s</a> from m3_compile.o(.text.op_u64_TruncSat_f32_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[242]">op_u64_TruncSat_f32_s_r</a> from m3_compile.o(.text.op_u64_TruncSat_f32_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[243]">op_u64_TruncSat_f32_s_s</a> from m3_compile.o(.text.op_u64_TruncSat_f32_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[248]">op_u64_TruncSat_f64_r_r</a> from m3_compile.o(.text.op_u64_TruncSat_f64_r_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[249]">op_u64_TruncSat_f64_r_s</a> from m3_compile.o(.text.op_u64_TruncSat_f64_r_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[24a]">op_u64_TruncSat_f64_s_r</a> from m3_compile.o(.text.op_u64_TruncSat_f64_s_r) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[24b]">op_u64_TruncSat_f64_s_s</a> from m3_compile.o(.text.op_u64_TruncSat_f64_s_s) referenced from m3_compile.o(.rodata.c_operationsFC)
 <LI><a href="#[1e1]">op_u64_Trunc_f32_r_r</a> from m3_compile.o(.text.op_u64_Trunc_f32_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e2]">op_u64_Trunc_f32_r_s</a> from m3_compile.o(.text.op_u64_Trunc_f32_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e3]">op_u64_Trunc_f32_s_r</a> from m3_compile.o(.text.op_u64_Trunc_f32_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e4]">op_u64_Trunc_f32_s_s</a> from m3_compile.o(.text.op_u64_Trunc_f32_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1e9]">op_u64_Trunc_f64_r_r</a> from m3_compile.o(.text.op_u64_Trunc_f64_r_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ea]">op_u64_Trunc_f64_r_s</a> from m3_compile.o(.text.op_u64_Trunc_f64_r_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1eb]">op_u64_Trunc_f64_s_r</a> from m3_compile.o(.text.op_u64_Trunc_f64_s_r) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[1ec]">op_u64_Trunc_f64_s_s</a> from m3_compile.o(.text.op_u64_Trunc_f64_s_s) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[177]">op_u64_Xor_rs</a> from m3_compile.o(.text.op_u64_Xor_rs) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[178]">op_u64_Xor_ss</a> from m3_compile.o(.text.op_u64_Xor_ss) referenced from m3_compile.o(.rodata.c_operations)
 <LI><a href="#[6c]">v_FindFunction</a> from m3_env.o(.text.v_FindFunction) referenced 2 times from m3_env.o(.text.m3_FindFunction)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[268]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[422]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[423]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[26b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[424]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26c]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[2c8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[26e]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[270]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[272]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[273]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[274]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[425]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[276]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[278]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[279]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[27a]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[27c]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[27e]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[280]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[281]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[282]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[284]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[426]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[286]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[288]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[28a]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[28c]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[427]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[298]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[428]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[28e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[429]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[42a]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[42b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[290]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[42c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[42d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[42e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[292]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[42f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[430]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[293]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[431]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[432]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[433]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[434]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[435]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[436]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[437]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[438]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[439]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[43a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[43b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[43c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[43d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[29d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[43e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[43f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[440]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[441]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[442]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[443]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[444]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[269]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[445]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[295]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[297]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[446]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[299]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 11592 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; run_wasm &rArr; m3_LoadModule &rArr; InitElements &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[447]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[2da]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[448]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[29e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a0]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
</UL>

<P><STRONG><a name="[2a3]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[2a5]"></a>realloc</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Remainder_ss
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Remainder_sr
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Remainder_rs
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Divide_ss
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Divide_sr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Divide_rs
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[449]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Remainder_ss
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Remainder_sr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Remainder_rs
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Divide_ss
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Divide_sr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Divide_rs
</UL>

<P><STRONG><a name="[2a7]"></a>_ll_sdiv</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2a9]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
</UL>

<P><STRONG><a name="[2ec]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreFuncTypesEqual
</UL>

<P><STRONG><a name="[2ad]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Entry
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataSegments
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CopyMem
</UL>

<P><STRONG><a name="[2ab]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[44a]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_MemCopy
</UL>

<P><STRONG><a name="[2ac]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[44b]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_InitExpr
</UL>

<P><STRONG><a name="[44c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_MemFill
</UL>

<P><STRONG><a name="[2a2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Entry
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>

<P><STRONG><a name="[44f]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_InitExpr
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[450]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[380]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Custom
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;v_FindFunction
</UL>

<P><STRONG><a name="[452]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[455]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[2a4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[2b9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[458]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[2b5]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[28f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[2a1]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[2b8]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[2ba]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2bc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[2bd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[2be]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2bf]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2bb]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[277]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[26d]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[2aa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[48]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[2c2]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[27f]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[2c5]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[27b]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[283]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[2c6]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[27d]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[285]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[26f]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[2c1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[45e]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2ae]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[460]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[462]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2b7]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[463]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2c4]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[2c0]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[2cf]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2d2]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[2d3]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[287]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[289]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[2d4]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[28b]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[28d]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[2d5]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2c3]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[2d6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2b6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[296]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2d1]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2cb]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[29b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2db]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[2d7]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[2dc]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[2dd]"></a>AcquireCodePage</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m3_env.o(.text.AcquireCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = AcquireCodePage &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePageWithCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCompilationCodePage
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[2de]"></a>AcquireCodePageWithCapacity</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, m3_env.o(.text.AcquireCodePageWithCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCodePage
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AcquireCodePage
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCodePageOfCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePage
</UL>

<P><STRONG><a name="[2e2]"></a>AcquireCompilationCodePage</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, m3_compile.o(.text.AcquireCompilationCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AcquireCompilationCodePage &rArr; AcquireCodePage &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePage
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[34d]"></a>AddTrapRecord</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m3_compile.o(.text.AddTrapRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AddTrapRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Unreachable
</UL>

<P><STRONG><a name="[2e3]"></a>AlignSlotToType</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, m3_compile.o(.text.AlignSlotToType))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AlignSlotToType &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlotsWithinRange
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReserveConstants
</UL>

<P><STRONG><a name="[2e5]"></a>AllocFuncType</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m3_function.o(.text.AllocFuncType))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AllocFuncType &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewEnvironment
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
</UL>

<P><STRONG><a name="[2e7]"></a>AllocateConstantSlots</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, m3_compile.o(.text.AllocateConstantSlots))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = AllocateConstantSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlotsWithinRange
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>

<P><STRONG><a name="[388]"></a>AllocateRegister</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, m3_compile.o(.text.AllocateRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AllocateRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
</UL>

<P><STRONG><a name="[2e9]"></a>AllocateSlots</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, m3_compile.o(.text.AllocateSlots))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlotsWithinRange
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReferencedLocalWithinCurrentBlock
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushAllocatedSlotAndEmit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
</UL>

<P><STRONG><a name="[2e8]"></a>AllocateSlotsWithinRange</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, m3_compile.o(.text.AllocateSlotsWithinRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocated
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateConstantSlots
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlots
</UL>

<P><STRONG><a name="[2eb]"></a>AreFuncTypesEqual</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m3_function.o(.text.AreFuncTypesEqual))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AreFuncTypesEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AddFuncType
</UL>

<P><STRONG><a name="[2ed]"></a>BridgeToNewPageIfNecessary</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m3_emit.o(.text.BridgeToNewPageIfNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f2]"></a>CompileBlock</STRONG> (Thumb, 640 bytes, Stack size 80 bytes, m3_compile.o(.text.CompileBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeParamType
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateBlockEnd
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumParams
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatchBranches
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnwindBlockStack
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocatedByType
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[2fd]"></a>CompileBlockStatements</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, m3_compile.o(.text.CompileBlockStatements))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpInfo
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_opcode
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_InitExpr
</UL>

<P><STRONG><a name="[307]"></a>CompileCallArgsAndReturn</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, m3_compile.o(.text.CompileCallArgsAndReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = CompileCallArgsAndReturn &rArr; CopyStackTopToSlot &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeResultType
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumParams
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToSlot
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxUsedSlotPlusOne
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocatedByType
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
</UL>

<P><STRONG><a name="[30b]"></a>CompileElseBlock</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, m3_compile.o(.text.CompileElseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = CompileElseBlock &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCompilationCodePage
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCompilationCodePage
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[30f]"></a>CompileFunction</STRONG> (Thumb, 640 bytes, Stack size 56 bytes, m3_compile.o(.text.CompileFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = CompileFunction &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlot
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxUsedSlotPlusOne
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotAllocated
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCompilationCodePage
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCompilationCodePage
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CopyMem
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionArgType
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgs
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumReturns
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReserveConstants
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileLocals
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_CallIndirect
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Compile
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FindFunction
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_RunStart
</UL>

<P><STRONG><a name="[317]"></a>CompileLocals</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, m3_compile.o(.text.CompileLocals))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = CompileLocals &rArr; PushAllocatedSlot &rArr; _PushAllocatedSlotAndEmit &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeType
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>

<P><STRONG><a name="[86]"></a>Compile_Branch</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, m3_compile.o(.text.Compile_Branch))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Compile_Branch &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePointer
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranch
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranchPointer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumParams
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockScope
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStackPolymorphic
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[87]"></a>Compile_BranchTable</STRONG> (Thumb, 480 bytes, Stack size 56 bytes, m3_compile.o(.text.Compile_BranchTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Compile_BranchTable &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitConstant32
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranch
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockScope
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStackPolymorphic
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCompilationCodePage
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCompilationCodePage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[89]"></a>Compile_Call</STRONG> (Thumb, 290 bytes, Stack size 80 bytes, m3_compile.o(.text.Compile_Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = Compile_Call &rArr; CompileCallArgsAndReturn &rArr; CopyStackTopToSlot &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_GetFunctionName
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionImportModuleName
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_GetFunction
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[8a]"></a>Compile_CallIndirect</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, m3_compile.o(.text.Compile_CallIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = Compile_CallIndirect &rArr; CompileCallArgsAndReturn &rArr; CopyStackTopToSlot &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ce]"></a>Compile_Const_f32</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_Const_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Compile_Const_f32 &rArr; PushConst &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_f32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[cf]"></a>Compile_Const_f64</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, m3_compile.o(.text.Compile_Const_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Compile_Const_f64 &rArr; PushConst &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_f64
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[cc]"></a>Compile_Const_i32</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_Const_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Compile_Const_i32 &rArr; PushConst &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[cd]"></a>Compile_Const_i64</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, m3_compile.o(.text.Compile_Const_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Compile_Const_i64 &rArr; PushConst &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i64
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1cc]"></a>Compile_Convert</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Compile_Convert &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpInfo
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlotAndEmit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterTypeAllocated
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.rodata.c_operations)
<LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[8b]"></a>Compile_Drop</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_Drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Compile_Drop &rArr; Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[85]"></a>Compile_End</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_End))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Compile_End &rArr; ReturnValues &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ValidateBlockEnd
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[22b]"></a>Compile_ExtendedOpcode</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_ExtendedOpcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Compile_ExtendedOpcode &rArr; Read_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpInfo
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_u8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[337]"></a>Compile_GetGlobal</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_GetGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Compile_GetGlobal &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlotAndEmit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetSetGlobal
</UL>

<P><STRONG><a name="[8d]"></a>Compile_GetLocal</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_GetLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Compile_GetLocal &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgsAndLocals
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[8f]"></a>Compile_GetSetGlobal</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, m3_compile.o(.text.Compile_GetSetGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Compile_GetSetGlobal &rArr; Compile_SetGlobal &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetGlobal
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[84]"></a>Compile_If</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, m3_compile.o(.text.Compile_If))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Compile_If &rArr; CompileElseBlock &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlockType
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePointer
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveNonTopRegisters
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[92]"></a>Compile_Load_Store</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_Load_Store))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Compile_Load_Store &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitConstant32
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpInfo
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[83]"></a>Compile_LoopOrBlock</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, m3_compile.o(.text.Compile_LoopOrBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Compile_LoopOrBlock &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlockType
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumParams
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisters
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlots
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumBlockValuesOnStack
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsConstantSlot
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[24c]"></a>Compile_Memory_CopyFill</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_Memory_CopyFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Compile_Memory_CopyFill &rArr; CopyStackTopToRegister &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[cb]"></a>Compile_Memory_Grow</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_Memory_Grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Compile_Memory_Grow &rArr; CopyStackTopToRegister &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ca]"></a>Compile_Memory_Size</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_Memory_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = Compile_Memory_Size &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[82]"></a>Compile_Nop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m3_compile.o(.text.Compile_Nop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Compile_Nop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[306]"></a>Compile_Operator</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, m3_compile.o(.text.Compile_Operator))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetOpInfo
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus1InRegister
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIntType
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>

<P><STRONG><a name="[88]"></a>Compile_Return</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Compile_Return &rArr; ReturnValues &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlockScope
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStackPolymorphic
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[8c]"></a>Compile_Select</STRONG> (Thumb, 566 bytes, Stack size 64 bytes, m3_compile.o(.text.Compile_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = Compile_Select &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidSlot
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus2InRegister
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus1InRegister
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromTop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIntType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[33b]"></a>Compile_SetGlobal</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_SetGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = Compile_SetGlobal &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetSetGlobal
</UL>

<P><STRONG><a name="[8e]"></a>Compile_SetLocal</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, m3_compile.o(.text.Compile_SetLocal))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Compile_SetLocal &rArr; CopyStackTopToSlot &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgsAndLocals
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReferencedLocalWithinCurrentBlock
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToSlot
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[81]"></a>Compile_Unreachable</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, m3_compile.o(.text.Compile_Unreachable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Compile_Unreachable &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStackPolymorphic
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTrapRecord
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[344]"></a>CopyStackIndexToSlot</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, m3_compile.o(.text.CopyStackIndexToSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackIndexInRegister
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToSlot
</UL>

<P><STRONG><a name="[34f]"></a>CopyStackSlotsR</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, m3_compile.o(.text.CopyStackSlotsR))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchSlot
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtraSlotForStackIndex
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
</UL>

<P><STRONG><a name="[321]"></a>CopyStackTopToRegister</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m3_compile.o(.text.CopyStackTopToRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = CopyStackTopToRegister &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_CopyFill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Grow
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
</UL>

<P><STRONG><a name="[309]"></a>CopyStackTopToSlot</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, m3_compile.o(.text.CopyStackTopToSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = CopyStackTopToSlot &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
</UL>

<P><STRONG><a name="[386]"></a>DeallocateRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m3_compile.o(.text.DeallocateRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeallocateRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
</UL>

<P><STRONG><a name="[352]"></a>DeallocateSlot</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, m3_compile.o(.text.DeallocateSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[329]"></a>EmitConstant32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m3_emit.o(.text.EmitConstant32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmitConstant32 &rArr; EmitWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
</UL>

<P><STRONG><a name="[30c]"></a>EmitOp</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, m3_emit.o(.text.EmitOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord_impl
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BridgeToNewPageIfNecessary
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_CopyFill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Grow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Size
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranch
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetGlobal
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_End
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Return
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Unreachable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[324]"></a>EmitPatchingBranch</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, m3_compile.o(.text.EmitPatchingBranch))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = EmitPatchingBranch &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranchPointer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
</UL>

<P><STRONG><a name="[322]"></a>EmitPatchingBranchPointer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, m3_compile.o(.text.EmitPatchingBranchPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EmitPatchingBranchPointer &rArr; EmitPointer &rArr; EmitWord_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranch
</UL>

<P><STRONG><a name="[30d]"></a>EmitPointer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, m3_emit.o(.text.EmitPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EmitPointer &rArr; EmitWord_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord_impl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePointer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPatchingBranchPointer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetGlobal
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[31e]"></a>EmitSlotNumOfStackTopAndPop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, m3_compile.o(.text.EmitSlotNumOfStackTopAndPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EmitSlotNumOfStackTopAndPop &rArr; Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_CopyFill
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[328]"></a>EmitSlotOffset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, m3_emit.o(.text.EmitSlotOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EmitSlotOffset &rArr; EmitWord32
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushAllocatedSlotAndEmit
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[353]"></a>EmitWord32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m3_code.o(.text.EmitWord32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EmitWord32
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitConstant32
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
</UL>

<P><STRONG><a name="[38a]"></a>EmitWord64</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m3_code.o(.text.EmitWord64))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EmitWord64
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
</UL>

<P><STRONG><a name="[354]"></a>EmitWord_impl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, m3_code.o(.text.EmitWord_impl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EmitWord_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
</UL>

<P><STRONG><a name="[2ee]"></a>EnsureCodePageNumLines</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, m3_emit.o(.text.EnsureCodePageNumLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFreeLines
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePage
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord_impl
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePageWithCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BridgeToNewPageIfNecessary
</UL>

<P><STRONG><a name="[2e0]"></a>Environment_AcquireCodePage</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m3_env.o(.text.Environment_AcquireCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Environment_AcquireCodePage &rArr; RemoveCodePageOfCapacity &rArr; NumFreeLines
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCodePageOfCapacity
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePageWithCapacity
</UL>

<P><STRONG><a name="[357]"></a>Environment_AddFuncType</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, m3_env.o(.text.Environment_AddFuncType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Environment_AddFuncType &rArr; AreFuncTypesEqual &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AreFuncTypesEqual
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewEnvironment
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
</UL>

<P><STRONG><a name="[359]"></a>Environment_Release</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, m3_env.o(.text.Environment_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Environment_Release &rArr; FreeCodePages &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCodePages
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeEnvironment
</UL>

<P><STRONG><a name="[390]"></a>Environment_ReleaseCodePages</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, m3_env.o(.text.Environment_ReleaseCodePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Environment_ReleaseCodePages
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime_Release
</UL>

<P><STRONG><a name="[393]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[35b]"></a>EvaluateExpression</STRONG> (Thumb, 444 bytes, Stack size 10984 bytes, m3_env.o(.text.EvaluateExpression))
<BR><BR>[Stack]<UL><LI>Max Depth = 11400 + Unknown Stack Size
<LI>Call Chain = EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePage
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePage
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime_Release
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SizeOfType
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitElements
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataSegments
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGlobals
</UL>

<P><STRONG><a name="[34b]"></a>FindReferencedLocalWithinCurrentBlock</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, m3_compile.o(.text.FindReferencedLocalWithinCurrentBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = FindReferencedLocalWithinCurrentBlock &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementSlotUsageCount
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlots
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
</UL>

<P><STRONG><a name="[38f]"></a>ForEachModule</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, m3_env.o(.text.ForEachModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ForEachModule
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FindFunction
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime_Release
</UL>

<P><STRONG><a name="[35a]"></a>FreeCodePages</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m3_code.o(.text.FreeCodePages))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FreeCodePages &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_Release
</UL>

<P><STRONG><a name="[35f]"></a>FreeImportInfo</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, m3_function.o(.text.FreeImportInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Release
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeModule
</UL>

<P><STRONG><a name="[360]"></a>Function_Release</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, m3_function.o(.text.Function_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Function_Release &rArr; FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeImportInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_FreeFunctions
</UL>

<P><STRONG><a name="[31c]"></a>GetBlockScope</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, m3_compile.o(.text.GetBlockScope))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetBlockScope
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Return
</UL>

<P><STRONG><a name="[350]"></a>GetExtraSlotForStackIndex</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, m3_compile.o(.text.GetExtraSlotForStackIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GetExtraSlotForStackIndex &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
</UL>

<P><STRONG><a name="[2f4]"></a>GetFuncTypeNumParams</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m3_function.o(.text.GetFuncTypeNumParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFuncTypeNumParams
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
</UL>

<P><STRONG><a name="[2f8]"></a>GetFuncTypeNumResults</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m3_function.o(.text.GetFuncTypeNumResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFuncTypeNumResults
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>

<P><STRONG><a name="[2f5]"></a>GetFuncTypeParamType</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, m3_function.o(.text.GetFuncTypeParamType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFuncTypeParamType
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
</UL>

<P><STRONG><a name="[30a]"></a>GetFuncTypeResultType</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, m3_function.o(.text.GetFuncTypeResultType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFuncTypeResultType
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>

<P><STRONG><a name="[315]"></a>GetFunctionArgType</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, m3_function.o(.text.GetFunctionArgType))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetFunctionArgType &rArr; GetFunctionNumArgs
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>

<P><STRONG><a name="[32b]"></a>GetFunctionImportModuleName</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, m3_function.o(.text.GetFunctionImportModuleName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFunctionImportModuleName
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
</UL>

<P><STRONG><a name="[39d]"></a>GetFunctionNames</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, m3_function.o(.text.GetFunctionNames))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetFunctionNames
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_GetFunctionName
</UL>

<P><STRONG><a name="[314]"></a>GetFunctionNumArgs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m3_function.o(.text.GetFunctionNumArgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFunctionNumArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgsAndLocals
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionArgType
</UL>

<P><STRONG><a name="[339]"></a>GetFunctionNumArgsAndLocals</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, m3_function.o(.text.GetFunctionNumArgsAndLocals))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetFunctionNumArgsAndLocals &rArr; GetFunctionNumArgs
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetLocal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
</UL>

<P><STRONG><a name="[312]"></a>GetFunctionNumReturns</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m3_function.o(.text.GetFunctionNumReturns))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetFunctionNumReturns
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>

<P><STRONG><a name="[308]"></a>GetMaxUsedSlotPlusOne</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, m3_compile.o(.text.GetMaxUsedSlotPlusOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetMaxUsedSlotPlusOne &rArr; IsSlotAllocated
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
</UL>

<P><STRONG><a name="[341]"></a>GetNumBlockValuesOnStack</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, m3_compile.o(.text.GetNumBlockValuesOnStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetNumBlockValuesOnStack
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
</UL>

<P><STRONG><a name="[304]"></a>GetOpInfo</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, m3_compile.o(.text.GetOpInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetOpInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_ExtendedOpcode
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>

<P><STRONG><a name="[320]"></a>GetPC</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m3_emit.o(.text.GetPC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetPC &rArr; GetPagePC
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatchBranches
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[2f3]"></a>GetPagePC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m3_code.o(.text.GetPagePC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetPagePC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReservePointer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[387]"></a>GetRegisterStackIndex</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, m3_compile.o(.text.GetRegisterStackIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRegisterStackIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveNonTopRegisters
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
</UL>

<P><STRONG><a name="[2fa]"></a>GetSlotForStackIndex</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, m3_compile.o(.text.GetSlotForStackIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSlotForStackIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetLocal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtraSlotForStackIndex
</UL>

<P><STRONG><a name="[397]"></a>GetStackPointerForArgs</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, m3_env.o(.text.GetStackPointerForArgs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetStackPointerForArgs
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallVL
</UL>

<P><STRONG><a name="[342]"></a>GetStackTopIndex</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, m3_compile.o(.text.GetStackTopIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToSlot
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveNonTopRegisters
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus2InRegister
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus1InRegister
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
</UL>

<P><STRONG><a name="[327]"></a>GetStackTopSlotNumber</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, m3_compile.o(.text.GetStackTopSlotNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetStackTopSlotNumber &rArr; GetStackTopIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[345]"></a>GetStackTopType</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m3_compile.o(.text.GetStackTopType))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetStackTopType &rArr; GetStackTypeFromTop
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromTop
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
</UL>

<P><STRONG><a name="[33a]"></a>GetStackTypeFromBottom</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m3_compile.o(.text.GetStackTypeFromBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetStackTypeFromBottom
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetLocal
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReferencedLocalWithinCurrentBlock
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtraSlotForStackIndex
</UL>

<P><STRONG><a name="[348]"></a>GetStackTypeFromTop</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, m3_compile.o(.text.GetStackTypeFromTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetStackTypeFromTop
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[2e4]"></a>GetTypeNumSlots</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m3_compile.o(.text.GetTypeNumSlots))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeallocateSlot
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlotsWithinRange
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocatedByType
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetExtraSlotForStackIndex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReserveConstants
</UL>

<P><STRONG><a name="[37b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 854 bytes, Stack size 72 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[37a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f1xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[36d]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[391]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[362]"></a>HAL_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f1xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[364]"></a>HAL_InitTick</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f1xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[365]"></a>HAL_MspInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[367]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[363]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[36c]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[36e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 228 bytes, Stack size 44 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[36f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1658 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[366]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35e]"></a>IncrementSlotUsageCount</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, m3_compile.o(.text.IncrementSlotUsageCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IncrementSlotUsageCount
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReferencedLocalWithinCurrentBlock
</UL>

<P><STRONG><a name="[372]"></a>InitDataSegments</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, m3_env.o(.text.InitDataSegments))
<BR><BR>[Stack]<UL><LI>Max Depth = 11448 + Unknown Stack Size
<LI>Call Chain = InitDataSegments &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_LoadModule
</UL>

<P><STRONG><a name="[373]"></a>InitElements</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, m3_env.o(.text.InitElements))
<BR><BR>[Stack]<UL><LI>Max Depth = 11464 + Unknown Stack Size
<LI>Call Chain = InitElements &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_LoadModule
</UL>

<P><STRONG><a name="[375]"></a>InitGlobals</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, m3_env.o(.text.InitGlobals))
<BR><BR>[Stack]<UL><LI>Max Depth = 11432 + Unknown Stack Size
<LI>Call Chain = InitGlobals &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_LoadModule
</UL>

<P><STRONG><a name="[376]"></a>InitMemory</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, m3_env.o(.text.InitMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = InitMemory &rArr; ResizeMemory &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResizeMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_LoadModule
</UL>

<P><STRONG><a name="[338]"></a>Is64BitType</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, m3_core.o(.text.Is64BitType))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveArgsAndLocals
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetGlobal
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>

<P><STRONG><a name="[343]"></a>IsConstantSlot</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, m3_compile.o(.text.IsConstantSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsConstantSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
</UL>

<P><STRONG><a name="[385]"></a>IsFpRegisterSlotAlias</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, m3_compile.o(.text.IsFpRegisterSlotAlias))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsFpRegisterSlotAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
</UL>

<P><STRONG><a name="[33f]"></a>IsFpType</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m3_core.o(.text.IsFpType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsFpType
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResolveBlockResults
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterTypeAllocated
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>

<P><STRONG><a name="[346]"></a>IsIntType</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, m3_core.o(.text.IsIntType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsIntType
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[378]"></a>IsRegisterAllocated</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, m3_compile.o(.text.IsRegisterAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRegisterAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveNonTopRegisters
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterTypeAllocated
</UL>

<P><STRONG><a name="[384]"></a>IsRegisterSlotAlias</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, m3_compile.o(.text.IsRegisterSlotAlias))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsRegisterSlotAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
</UL>

<P><STRONG><a name="[332]"></a>IsRegisterTypeAllocated</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, m3_compile.o(.text.IsRegisterTypeAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IsRegisterTypeAllocated &rArr; IsFpType
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
</UL>

<P><STRONG><a name="[361]"></a>IsSlotAllocated</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, m3_compile.o(.text.IsSlotAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsSlotAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxUsedSlotPlusOne
</UL>

<P><STRONG><a name="[34e]"></a>IsStackIndexInRegister</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, m3_compile.o(.text.IsStackIndexInRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsStackIndexInRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus2InRegister
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopMinus1InRegister
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
</UL>

<P><STRONG><a name="[2ff]"></a>IsStackPolymorphic</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, m3_compile.o(.text.IsStackPolymorphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsStackPolymorphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Return
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[31d]"></a>IsStackTopInRegister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m3_compile.o(.text.IsStackTopInRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsStackTopInRegister &rArr; IsStackIndexInRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackIndexInRegister
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[333]"></a>IsStackTopInSlot</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m3_compile.o(.text.IsStackTopInSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IsStackTopInSlot &rArr; IsStackTopInRegister &rArr; IsStackIndexInRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreservedCopyTopSlot
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
</UL>

<P><STRONG><a name="[347]"></a>IsStackTopMinus1InRegister</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m3_compile.o(.text.IsStackTopMinus1InRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsStackTopMinus1InRegister &rArr; IsStackIndexInRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackIndexInRegister
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[349]"></a>IsStackTopMinus2InRegister</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, m3_compile.o(.text.IsStackTopMinus2InRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsStackTopMinus2InRegister &rArr; IsStackIndexInRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackIndexInRegister
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[34a]"></a>IsValidSlot</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, m3_compile.o(.text.IsValidSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IsValidSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[313]"></a>MarkSlotAllocated</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, m3_compile.o(.text.MarkSlotAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocated
</UL>

<P><STRONG><a name="[2ea]"></a>MarkSlotsAllocated</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, m3_compile.o(.text.MarkSlotsAllocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotAllocated
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlotsWithinRange
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocatedByType
</UL>

<P><STRONG><a name="[2fc]"></a>MarkSlotsAllocatedByType</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, m3_compile.o(.text.MarkSlotsAllocatedByType))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MarkSlotsAllocatedByType &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotsAllocated
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37c]"></a>Module_AddFunction</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, m3_module.o(.text.Module_AddFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Module_AddFunction &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_GetFunction
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Function
</UL>

<P><STRONG><a name="[37d]"></a>Module_AddGlobal</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, m3_module.o(.text.Module_AddGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Module_AddGlobal &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
</UL>

<P><STRONG><a name="[37e]"></a>Module_FreeFunctions</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m3_module.o(.text.Module_FreeFunctions))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Module_FreeFunctions &rArr; Function_Release &rArr; FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeModule
</UL>

<P><STRONG><a name="[32a]"></a>Module_GetFunction</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, m3_module.o(.text.Module_GetFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Module_GetFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Code
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddFunction
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e1]"></a>NewCodePage</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m3_code.o(.text.NewCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePageWithCapacity
</UL>

<P><STRONG><a name="[31b]"></a>NormalizeType</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, m3_core.o(.text.NormalizeType))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NormalizeType
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlockType
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileLocals
</UL>

<P><STRONG><a name="[355]"></a>NumFreeLines</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, m3_code.o(.text.NumFreeLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NumFreeLines
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePageNoTrack
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveCodePageOfCapacity
</UL>

<P><STRONG><a name="[3a6]"></a>ParseModuleSection</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, m3_parse.o(.text.ParseModuleSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ParseModuleSection
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
</UL>

<P><STRONG><a name="[266]"></a>ParseSection_Code</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, m3_parse.o(.text.ParseSection_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ParseSection_Code &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_GetFunction
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[25d]"></a>ParseSection_Custom</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, m3_parse.o(.text.ParseSection_Custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ParseSection_Custom &rArr; Read_utf8 &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[267]"></a>ParseSection_Data</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, m3_parse.o(.text.ParseSection_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 21536 + Unknown Stack Size
<LI>Call Chain = ParseSection_Data &rArr; Parse_InitExpr &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_InitExpr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[265]"></a>ParseSection_Element</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, m3_parse.o(.text.ParseSection_Element))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ParseSection_Element &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[263]"></a>ParseSection_Export</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, m3_parse.o(.text.ParseSection_Export))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ParseSection_Export &rArr; Read_utf8 &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_u8
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[260]"></a>ParseSection_Function</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, m3_parse.o(.text.ParseSection_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ParseSection_Function &rArr; Module_AddFunction &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[262]"></a>ParseSection_Global</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, m3_parse.o(.text.ParseSection_Global))
<BR><BR>[Stack]<UL><LI>Max Depth = 21544 + Unknown Stack Size
<LI>Call Chain = ParseSection_Global &rArr; Parse_InitExpr &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeType
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_InitExpr
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddGlobal
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[25f]"></a>ParseSection_Import</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, m3_parse.o(.text.ParseSection_Import))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ParseSection_Import &rArr; Module_AddFunction &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeType
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_u8
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseType_Memory
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddFunction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddGlobal
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeImportInfo
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[261]"></a>ParseSection_Memory</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, m3_parse.o(.text.ParseSection_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ParseSection_Memory &rArr; ParseType_Memory &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseType_Memory
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[264]"></a>ParseSection_Start</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, m3_parse.o(.text.ParseSection_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ParseSection_Start &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[25e]"></a>ParseSection_Type</STRONG> (Thumb, 892 bytes, Stack size 16 bytes, m3_parse.o(.text.ParseSection_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = ParseSection_Type &rArr; AllocFuncType &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFuncType
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeType
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AddFuncType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_parse.o(.data.ParseModuleSection.s_parsers)
</UL>
<P><STRONG><a name="[383]"></a>ParseType_Memory</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, m3_parse.o(.text.ParseType_Memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ParseType_Memory &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Memory
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
</UL>

<P><STRONG><a name="[382]"></a>Parse_InitExpr</STRONG> (Thumb, 128 bytes, Stack size 21168 bytes, m3_parse.o(.text.Parse_InitExpr))
<BR><BR>[Stack]<UL><LI>Max Depth = 21496 + Unknown Stack Size
<LI>Call Chain = Parse_InitExpr &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Data
</UL>

<P><STRONG><a name="[302]"></a>PatchBranches</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, m3_compile.o(.text.PatchBranches))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PatchBranches &rArr; GetPC &rArr; GetPagePC
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f9]"></a>Pop</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, m3_compile.o(.text.Pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeallocateRegister
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeallocateSlot
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpRegisterSlotAlias
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterSlotAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetGlobal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnValues
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnwindBlockStack
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotNumOfStackTopAndPop
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopType
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Drop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[2f6]"></a>PopType</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, m3_compile.o(.text.PopType))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PopType &rArr; Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_CopyFill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Grow
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
</UL>

<P><STRONG><a name="[33d]"></a>PreserveArgsAndLocals</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, m3_compile.o(.text.PreserveArgsAndLocals))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = PreserveArgsAndLocals &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNumArgsAndLocals
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindReferencedLocalWithinCurrentBlock
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSlotForStackIndex
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[33c]"></a>PreserveNonTopRegisters</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, m3_compile.o(.text.PreserveNonTopRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = PreserveNonTopRegisters &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegisterStackIndex
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterAllocated
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[326]"></a>PreserveRegisterIfOccupied</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, m3_compile.o(.text.PreserveRegisterIfOccupied))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRegisterStackIndex
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeallocateRegister
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterAllocated
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlots
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromBottom
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Size
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveNonTopRegisters
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisters
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
</UL>

<P><STRONG><a name="[340]"></a>PreserveRegisters</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, m3_compile.o(.text.PreserveRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = PreserveRegisters &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreserveRegisterIfOccupied
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
</UL>

<P><STRONG><a name="[34c]"></a>PreservedCopyTopSlot</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, m3_compile.o(.text.PreservedCopyTopSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = PreservedCopyTopSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopSlotNumber
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInSlot
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackTopInRegister
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
</UL>

<P><STRONG><a name="[2fb]"></a>Push</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, m3_compile.o(.text.Push))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Push &rArr; AllocateRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateRegister
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpRegisterSlotAlias
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsRegisterSlotAlias
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileCallArgsAndReturn
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetLocal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushAllocatedSlotAndEmit
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
</UL>

<P><STRONG><a name="[316]"></a>PushAllocatedSlot</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m3_compile.o(.text.PushAllocatedSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PushAllocatedSlot &rArr; _PushAllocatedSlotAndEmit &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushAllocatedSlotAndEmit
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileLocals
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>

<P><STRONG><a name="[334]"></a>PushAllocatedSlotAndEmit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, m3_compile.o(.text.PushAllocatedSlotAndEmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PushAllocatedSlotAndEmit &rArr; _PushAllocatedSlotAndEmit &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PushAllocatedSlotAndEmit
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetGlobal
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushConst
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
</UL>

<P><STRONG><a name="[2f7]"></a>PushBlockResults</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, m3_compile.o(.text.PushBlockResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PushBlockResults &rArr; PushAllocatedSlot &rArr; _PushAllocatedSlotAndEmit &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeResultType
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlot
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushRegister
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
</UL>

<P><STRONG><a name="[38e]"></a>PushCodePage</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, m3_code.o(.text.PushCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PushCodePage
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePageNoTrack
</UL>

<P><STRONG><a name="[32e]"></a>PushConst</STRONG> (Thumb, 774 bytes, Stack size 88 bytes, m3_compile.o(.text.PushConst))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = PushConst &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord64
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitWord32
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlotAndEmit
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitOp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateConstantSlots
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsSlotAllocated
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is64BitType
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_f64
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_f32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_i64
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_i32
</UL>

<P><STRONG><a name="[335]"></a>PushRegister</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, m3_compile.o(.text.PushRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PushRegister &rArr; Push &rArr; AllocateRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Grow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Size
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Convert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Select
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushBlockResults
</UL>

<P><STRONG><a name="[330]"></a>ReadLEB_i32</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, m3_core.o(.text.ReadLEB_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadLEB_i32 &rArr; ReadLebSigned
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebSigned
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_i32
</UL>

<P><STRONG><a name="[331]"></a>ReadLEB_i64</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, m3_core.o(.text.ReadLEB_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadLEB_i64 &rArr; ReadLebSigned
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebSigned
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_i64
</UL>

<P><STRONG><a name="[31a]"></a>ReadLEB_i7</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, m3_core.o(.text.ReadLEB_i7))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadLEB_i7 &rArr; ReadLebSigned
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebSigned
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_CopyFill
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Grow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Memory_Size
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileLocals
</UL>

<P><STRONG><a name="[311]"></a>ReadLEB_u32</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, m3_core.o(.text.ReadLEB_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_CallIndirect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetSetGlobal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetLocal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_SetLocal
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Custom
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Memory
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Code
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Element
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Start
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Export
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Function
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseType_Memory
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitElements
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileLocals
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Load_Store
</UL>

<P><STRONG><a name="[381]"></a>ReadLEB_u7</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, m3_core.o(.text.ReadLEB_u7))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadLEB_u7 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Custom
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Global
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseType_Memory
</UL>

<P><STRONG><a name="[38b]"></a>ReadLebSigned</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, m3_core.o(.text.ReadLebSigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadLebSigned
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBlockType
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i7
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i64
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_i32
</UL>

<P><STRONG><a name="[38c]"></a>ReadLebUnsigned</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, m3_core.o(.text.ReadLebUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadLebUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
</UL>

<P><STRONG><a name="[32d]"></a>Read_f32</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, m3_core.o(.text.Read_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_f32
</UL>

<P><STRONG><a name="[32f]"></a>Read_f64</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, m3_core.o(.text.Read_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_f64
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Const_f64
</UL>

<P><STRONG><a name="[303]"></a>Read_opcode</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, m3_core.o(.text.Read_opcode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_opcode
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>

<P><STRONG><a name="[3a5]"></a>Read_u32</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, m3_core.o(.text.Read_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
</UL>

<P><STRONG><a name="[336]"></a>Read_u8</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, m3_core.o(.text.Read_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_ExtendedOpcode
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Export
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
</UL>

<P><STRONG><a name="[37f]"></a>Read_utf8</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, m3_core.o(.text.Read_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Read_utf8 &rArr; ReadLEB_u32 &rArr; ReadLebUnsigned
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Custom
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Export
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Import
</UL>

<P><STRONG><a name="[356]"></a>ReleaseCodePage</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, m3_env.o(.text.ReleaseCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ReleaseCodePage &rArr; ReleaseCodePageNoTrack &rArr; PushCodePage
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePageNoTrack
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnsureCodePageNumLines
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCompilationCodePage
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[38d]"></a>ReleaseCodePageNoTrack</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, m3_env.o(.text.ReleaseCodePageNoTrack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReleaseCodePageNoTrack &rArr; PushCodePage
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushCodePage
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFreeLines
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePage
</UL>

<P><STRONG><a name="[30e]"></a>ReleaseCompilationCodePage</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m3_compile.o(.text.ReleaseCompilationCodePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReleaseCompilationCodePage &rArr; ReleaseCodePage &rArr; ReleaseCodePageNoTrack &rArr; PushCodePage
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseCodePage
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileElseBlock
</UL>

<P><STRONG><a name="[2df]"></a>RemoveCodePageOfCapacity</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, m3_env.o(.text.RemoveCodePageOfCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RemoveCodePageOfCapacity &rArr; NumFreeLines
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumFreeLines
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcquireCodePageWithCapacity
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AcquireCodePage
</UL>

<P><STRONG><a name="[318]"></a>ReserveConstants</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, m3_compile.o(.text.ReserveConstants))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ReserveConstants &rArr; AlignSlotToType &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTypeNumSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>

<P><STRONG><a name="[31f]"></a>ReservePointer</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m3_emit.o(.text.ReservePointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReservePointer &rArr; EmitPointer &rArr; EmitWord_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPagePC
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[377]"></a>ResizeMemory</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, m3_env.o(.text.ResizeMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = ResizeMemory &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_MemGrow
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
</UL>

<P><STRONG><a name="[300]"></a>ResolveBlockResults</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, m3_compile.o(.text.ResolveBlockResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumParams
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackTopToRegister
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFpType
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumBlockValuesOnStack
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopType
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignSlotToType
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
</UL>

<P><STRONG><a name="[323]"></a>ReturnValues</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, m3_compile.o(.text.ReturnValues))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ReturnValues &rArr; CopyStackIndexToSlot &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeResultType
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFuncTypeNumResults
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackIndexToSlot
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsStackPolymorphic
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNumBlockValuesOnStack
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTypeFromTop
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackTopIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_End
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Return
</UL>

<P><STRONG><a name="[35d]"></a>Runtime_Release</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, m3_env.o(.text.Runtime_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Runtime_Release &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForEachModule
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_ReleaseCodePages
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[325]"></a>SetStackPolymorphic</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, m3_compile.o(.text.SetStackPolymorphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SetStackPolymorphic &rArr; UnwindBlockStack &rArr; Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnwindBlockStack
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_BranchTable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Branch
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Return
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Unreachable
</UL>

<P><STRONG><a name="[35c]"></a>SizeOfType</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, m3_core.o(.text.SizeOfType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SizeOfType
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[392]"></a>SystemClock_Config</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[351]"></a>TouchSlot</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, m3_compile.o(.text.TouchSlot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TouchSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyStackSlotsR
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkSlotAllocated
</UL>

<P><STRONG><a name="[301]"></a>UnwindBlockStack</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, m3_compile.o(.text.UnwindBlockStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UnwindBlockStack &rArr; Pop &rArr; DeallocateSlot &rArr; GetTypeNumSlots &rArr; Is64BitType
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStackPolymorphic
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>ValidateBlockEnd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, m3_compile.o(.text.ValidateBlockEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ValidateBlockEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_End
</UL>

<P><STRONG><a name="[6b]"></a>_FreeModule</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m3_env.o(.text._FreeModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _FreeModule &rArr; m3_FreeModule &rArr; Module_FreeFunctions &rArr; Function_Release &rArr; FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeModule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_env.o(.text.Runtime_Release)
</UL>
<P><STRONG><a name="[389]"></a>_PushAllocatedSlotAndEmit</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, m3_compile.o(.text._PushAllocatedSlotAndEmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _PushAllocatedSlotAndEmit &rArr; AllocateSlots &rArr; AllocateSlotsWithinRange &rArr; MarkSlotsAllocated &rArr; MarkSlotAllocated &rArr; TouchSlot
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Push
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitSlotOffset
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocateSlots
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlot
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushAllocatedSlotAndEmit
</UL>

<P><STRONG><a name="[305]"></a>m3Error</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, m3_env.o(.text.m3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = m3Error &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FindFunction
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_GetSetGlobal
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Operator
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileBlockStatements
</UL>

<P><STRONG><a name="[395]"></a>m3_CallV</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, m3_env.o(.text.m3_CallV))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = m3_CallV &rArr; m3_CallVL &rArr; Call
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallVL
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[396]"></a>m3_CallVL</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, m3_env.o(.text.m3_CallVL))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = m3_CallVL &rArr; Call
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStackPointerForArgs
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReportNativeStackUsage
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallV
</UL>

<P><STRONG><a name="[319]"></a>m3_CopyMem</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, m3_core.o(.text.m3_CopyMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = m3_CopyMem &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>

<P><STRONG><a name="[39a]"></a>m3_FindFunction</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, m3_env.o(.text.m3_FindFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = m3_FindFunction &rArr; m3_RunStart &rArr; CompileFunction &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3Error
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_RunStart
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForEachModule
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[39c]"></a>m3_FreeEnvironment</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, m3_env.o(.text.m3_FreeEnvironment))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = m3_FreeEnvironment &rArr; Environment_Release &rArr; FreeCodePages &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewEnvironment
</UL>

<P><STRONG><a name="[358]"></a>m3_FreeImpl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, m3_core.o(.text.m3_FreeImpl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeCodePages
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewRuntime
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Custom
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Export
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Release
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeImportInfo
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Runtime_Release
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeModule
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_Release
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeEnvironment
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AddFuncType
</UL>

<P><STRONG><a name="[394]"></a>m3_FreeModule</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, m3_module.o(.text.m3_FreeModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = m3_FreeModule &rArr; Module_FreeFunctions &rArr; Function_Release &rArr; FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_FreeFunctions
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeImportInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_FreeModule
</UL>

<P><STRONG><a name="[32c]"></a>m3_GetFunctionName</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, m3_function.o(.text.m3_GetFunctionName))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = m3_GetFunctionName &rArr; GetFunctionNames
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFunctionNames
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_Call
</UL>

<P><STRONG><a name="[39e]"></a>m3_GetResultsV</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, m3_env.o(.text.m3_GetResultsV))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = m3_GetResultsV &rArr; m3_GetResultsVL
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_GetResultsVL
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[39f]"></a>m3_GetResultsVL</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, m3_env.o(.text.m3_GetResultsVL))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = m3_GetResultsVL
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_GetResultsV
</UL>

<P><STRONG><a name="[3a0]"></a>m3_LoadModule</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, m3_env.o(.text.m3_LoadModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 11496 + Unknown Stack Size
<LI>Call Chain = m3_LoadModule &rArr; InitElements &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitElements
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitDataSegments
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitGlobals
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[2e6]"></a>m3_Malloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, m3_core.o(.text.m3_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewCodePage
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFuncType
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewRuntime
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewEnvironment
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Data
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseSection_Type
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_utf8
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CopyMem
</UL>

<P><STRONG><a name="[3a1]"></a>m3_NewEnvironment</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, m3_env.o(.text.m3_NewEnvironment))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = m3_NewEnvironment &rArr; AllocFuncType &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AllocFuncType
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeEnvironment
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environment_AddFuncType
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[3a2]"></a>m3_NewRuntime</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, m3_env.o(.text.m3_NewRuntime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = m3_NewRuntime &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeImpl
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ResetErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[3a4]"></a>m3_ParseModule</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, m3_parse.o(.text.m3_ParseModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = m3_ParseModule &rArr; m3_FreeModule &rArr; Module_FreeFunctions &rArr; Function_Release &rArr; FreeImportInfo &rArr; m3_FreeImpl &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Malloc
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u32
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseModuleSection
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FreeModule
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLEB_u7
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
</UL>

<P><STRONG><a name="[374]"></a>m3_Realloc</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, m3_core.o(.text.m3_Realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResizeMemory
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddFunction
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_AddGlobal
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitElements
</UL>

<P><STRONG><a name="[3a3]"></a>m3_ResetErrorInfo</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, m3_env.o(.text.m3_ResetErrorInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = m3_ResetErrorInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewRuntime
</UL>

<P><STRONG><a name="[39b]"></a>m3_RunStart</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, m3_env.o(.text.m3_RunStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = m3_RunStart &rArr; CompileFunction &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FindFunction
</UL>

<P><STRONG><a name="[2f0]"></a>m3_Yield</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, m3_core.o(.text.m3_Yield))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
</UL>

<P><STRONG><a name="[29a]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 11592 + Unknown Stack Size
<LI>Call Chain = main &rArr; run_wasm &rArr; m3_LoadModule &rArr; InitElements &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_wasm
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3a7]"></a>run_wasm</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, main.o(.text.run_wasm))
<BR><BR>[Stack]<UL><LI>Max Depth = 11576 + Unknown Stack Size
<LI>Call Chain = run_wasm &rArr; m3_LoadModule &rArr; InitElements &rArr; EvaluateExpression &rArr; CompileBlock &rArr; ResolveBlockResults &rArr; CopyStackSlotsR &rArr;  CopyStackSlotsR (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_GetResultsV
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallV
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_FindFunction
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_LoadModule
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_ParseModule
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewRuntime
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_NewEnvironment
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>v_FindFunction</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, m3_env.o(.text.v_FindFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = v_FindFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_env.o(.text.m3_FindFunction)
</UL>
<P><STRONG><a name="[2cc]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3e6]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3e5]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3e7]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3e8]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[2cd]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[2ce]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[3e9]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2d0]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[2c7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3c8]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Ceil_s
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Ceil_r
</UL>

<P><STRONG><a name="[465]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, ceilf.o(i.ceilf), UNUSED)

<P><STRONG><a name="[3b7]"></a>ceilf</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ceilf.o(i.ceilf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ceilf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Ceil_s
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Ceil_r
</UL>

<P><STRONG><a name="[3cf]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Floor_s
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Floor_r
</UL>

<P><STRONG><a name="[3be]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Floor_s
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Floor_r
</UL>

<P><STRONG><a name="[3d4]"></a>rint</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rint.o(i.rint))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rint &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Nearest_s
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Nearest_r
</UL>

<P><STRONG><a name="[3c3]"></a>rintf</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rintf.o(i.rintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Nearest_s
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Nearest_r
</UL>

<P><STRONG><a name="[3d5]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Sqrt_s
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Sqrt_r
</UL>

<P><STRONG><a name="[3c4]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Sqrt_s
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Sqrt_r
</UL>

<P><STRONG><a name="[3d7]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = trunc &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Trunc_s
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Trunc_r
</UL>

<P><STRONG><a name="[3c6]"></a>truncf</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, truncf.o(i.truncf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = truncf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Trunc_s
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Trunc_r
</UL>

<P><STRONG><a name="[49]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[294]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[398]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Store_f32_rr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Store_f32_rs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_rsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_rrs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_ssr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_srs
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_SetGlobal_f32
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_PreserveSetSlot_f32
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_SetSlot_f32
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_r
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_r
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_r
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_r
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_r
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_r
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_r
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_r
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Reinterpret_f32_s_r
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Reinterpret_f32_r_r
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Promote_f32_r
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Demote_f64_s
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Demote_f64_r
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_r
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_r
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_r
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_r
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_r
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_r
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_r
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_r
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_sr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_rs
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Max_rs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Min_rs
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_sr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_rs
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Multiply_rs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_sr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_rs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Add_rs
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Sqrt_r
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Nearest_r
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Trunc_r
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Floor_r
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Ceil_r
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Negate_r
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Abs_r
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThanOrEqual_sr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThanOrEqual_rs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThanOrEqual_sr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThanOrEqual_rs
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThan_sr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThan_rs
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThan_sr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThan_rs
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_NotEqual_rs
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Equal_rs
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallVL
</UL>

<P><STRONG><a name="[3f1]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3c7]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Add_ss
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Add_rs
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[3f4]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[3f9]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3ce]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Divide_ss
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Divide_sr
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Divide_rs
</UL>

<P><STRONG><a name="[3f7]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[466]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[3f8]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[3d9]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_s
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_r
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_s
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_r
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_s
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_r
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_s
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_r
</UL>

<P><STRONG><a name="[3fa]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3e0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_s
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_r
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_s
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_r
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_s
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_r
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_s
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_r
</UL>

<P><STRONG><a name="[3fb]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3c9]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i32_s_s
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i32_s_r
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i32_r_s
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i32_r_r
</UL>

<P><STRONG><a name="[467]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[3ca]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i64_s_s
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i64_s_r
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i64_r_s
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_i64_r_r
</UL>

<P><STRONG><a name="[468]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[3cb]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u32_s_s
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u32_s_r
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u32_r_s
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u32_r_r
</UL>

<P><STRONG><a name="[469]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[3cc]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u64_s_s
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u64_s_r
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u64_r_s
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Convert_u64_r_r
</UL>

<P><STRONG><a name="[46a]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[46b]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[3fc]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[3f0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[3fd]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[400]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3d3]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Multiply_ss
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Multiply_rs
</UL>

<P><STRONG><a name="[3fe]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3f3]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[3f6]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3ea]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[3ff]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[3ec]"></a>_drnd</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, drnd.o(x$fpl$drnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>

<P><STRONG><a name="[3eb]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[401]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3ee]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[3d6]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Subtract_ss
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Subtract_sr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Subtract_rs
</UL>

<P><STRONG><a name="[403]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Load_f32_s
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Load_f32_r
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_rsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_rrs
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_rss
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_ssr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_srs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Select_f32_sss
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_SetRegister_f32
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Reinterpret_i32_r_s
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Reinterpret_i32_r_r
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Promote_f32_s
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Promote_f32_r
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Demote_f64_s
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Demote_f64_r
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_r_s
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_r_r
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_r_s
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_r_r
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_r_s
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_r_r
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_r_s
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_r_r
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_ss
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_sr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_rs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Max_ss
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Max_rs
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Min_ss
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Min_rs
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_ss
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_sr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_rs
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Multiply_ss
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Multiply_rs
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_ss
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_sr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_rs
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Add_ss
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Add_rs
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Sqrt_s
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Sqrt_r
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Nearest_s
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Nearest_r
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Trunc_s
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Trunc_r
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Floor_s
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Floor_r
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Ceil_s
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Ceil_r
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Negate_s
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Negate_r
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Abs_s
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Abs_r
</UL>

<P><STRONG><a name="[404]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[3b6]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Add_ss
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Add_rs
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
</UL>

<P><STRONG><a name="[406]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[3b1]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_NotEqual_ss
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_NotEqual_rs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Equal_ss
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Equal_rs
</UL>

<P><STRONG><a name="[408]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[409]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3d1]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_s
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_r
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_s
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_r
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_s
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_r
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_s
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_r
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_s
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_r
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_s
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_r
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_s
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_r
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_s
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_r
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThan_ss
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThan_sr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThan_rs
</UL>

<P><STRONG><a name="[40a]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[3d0]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_s
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_r
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_s
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_r
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_s
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_r
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_s
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_r
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_s
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_r
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_s
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_r
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_s
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_r
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_s
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_r
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThanOrEqual_ss
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThanOrEqual_sr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_GreaterThanOrEqual_rs
</UL>

<P><STRONG><a name="[40b]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[3b2]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_s
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_r
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_s
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_r
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_s
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_r
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_s
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_r
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_s
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_r
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_s
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_r
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_s
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_r
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_s
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_r
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThanOrEqual_ss
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThanOrEqual_sr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThanOrEqual_rs
</UL>

<P><STRONG><a name="[40c]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3d2]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_s
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_r
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_s
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_r
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_s
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_r
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_s
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_r
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_s
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_r
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_s
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_r
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_s
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_r
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_s
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_r
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThan_ss
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThan_sr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_LessThan_rs
</UL>

<P><STRONG><a name="[40d]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[3ac]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_NotEqual_ss
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_NotEqual_rs
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Equal_ss
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Equal_rs
</UL>

<P><STRONG><a name="[40e]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[410]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[3c0]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_s
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_r
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_s
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_r
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_s
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_r
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_s
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_r
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_s
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_r
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_s
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_r
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_s
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_r
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_s
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_r
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThan_ss
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThan_sr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThan_rs
</UL>

<P><STRONG><a name="[411]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[3bf]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_s
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_r
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_s
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_r
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_s
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_r
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_s
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_r
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_s
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_r
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_s
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_r
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_r
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_r
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThanOrEqual_ss
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThanOrEqual_sr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_GreaterThanOrEqual_rs
</UL>

<P><STRONG><a name="[413]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[3af]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_s
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_r
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_s
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_r
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_s
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_r
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_s
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_r
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_s
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_r
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_s
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_r
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_r
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_r
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThanOrEqual_ss
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThanOrEqual_sr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThanOrEqual_rs
</UL>

<P><STRONG><a name="[414]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[3c1]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_s
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_r
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_s
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_r
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_s
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_r
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_s
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_r
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_s
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_r
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_s
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_r
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_s
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_r
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_s
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_r
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThan_ss
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThan_sr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_LessThan_rs
</UL>

<P><STRONG><a name="[416]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[418]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[3bd]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_ss
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_sr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Divide_rs
</UL>

<P><STRONG><a name="[417]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[46c]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[40f]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[3d8]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_s
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_r
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_s
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_r
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_r
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_r
</UL>

<P><STRONG><a name="[419]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3df]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_s
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_r
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_s
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_r
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_s
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_r
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_s
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_r
</UL>

<P><STRONG><a name="[41a]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3b8]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_s_s
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_s_r
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_r_s
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i32_r_r
</UL>

<P><STRONG><a name="[46d]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[3bb]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_s_s
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_s_r
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_r_s
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u64_r_r
</UL>

<P><STRONG><a name="[46e]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[3b9]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_s_s
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_s_r
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_r_s
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_i64_r_r
</UL>

<P><STRONG><a name="[46f]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[3ba]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_s_s
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_s_r
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_r_s
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Convert_u32_r_r
</UL>

<P><STRONG><a name="[470]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[412]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[471]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[415]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[472]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[3c2]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Multiply_ss
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Multiply_rs
</UL>

<P><STRONG><a name="[41b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[405]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_f
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_f
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[3f2]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[3ed]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
</UL>

<P><STRONG><a name="[3ef]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_ss
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_sr
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Subtract_rs
</UL>

<P><STRONG><a name="[41c]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[3dc]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_s
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_r
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_s
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_r
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_s
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_r
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_s
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_r
</UL>

<P><STRONG><a name="[41e]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3db]"></a>__aeabi_f2lz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_s
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_r
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_s
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_r
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_s
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_r
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_s
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_r
</UL>

<P><STRONG><a name="[41f]"></a>_ll_sfrom_f</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ffixll.o(x$fpl$llsfromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[3e4]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_s
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_r
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_s
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_r
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_s
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_r
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_s
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_r
</UL>

<P><STRONG><a name="[420]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3e3]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_s
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_r
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_s
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_r
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_s
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_r
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_s
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_r
</UL>

<P><STRONG><a name="[421]"></a>_ll_ufrom_f</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ffixull.o(x$fpl$llufromf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[271]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[275]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[379]"></a>MX_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, main.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[370]"></a>RCC_Delay</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f1xx_hal_rcc.o(.text.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[36b]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[368]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[369]"></a>NVIC_EncodePriority</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f1xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[36a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[371]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[69]"></a>op_Const64</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_Const64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_Const64
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.PushConst)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[6a]"></a>op_Const32</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_Const32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_Const32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.PushConst)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[64]"></a>op_CopySlot_64</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_CopySlot_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_CopySlot_64
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.CopyStackIndexToSlot)
<LI> m3_compile.o(.text.PreserveArgsAndLocals)
</UL>
<P><STRONG><a name="[65]"></a>op_CopySlot_32</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_CopySlot_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_CopySlot_32
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.CopyStackIndexToSlot)
<LI> m3_compile.o(.text.PreserveArgsAndLocals)
</UL>
<P><STRONG><a name="[67]"></a>op_PreserveCopySlot_64</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_PreserveCopySlot_64))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_PreserveCopySlot_64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.PreservedCopyTopSlot)
</UL>
<P><STRONG><a name="[68]"></a>op_PreserveCopySlot_32</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_PreserveCopySlot_32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_PreserveCopySlot_32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.PreservedCopyTopSlot)
</UL>
<P><STRONG><a name="[53]"></a>op_Return</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, m3_compile.o(.text.op_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = op_Return
</UL>
<BR>[Address Reference Count : 5]<UL><LI> m3_compile.o(.text.Compile_Return)
<LI> m3_compile.o(.text.Compile_End)
<LI> m3_compile.o(.text.Compile_Branch)
<LI> m3_compile.o(.text.Compile_BranchTable)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[58]"></a>op_GetGlobal_s64</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_GetGlobal_s64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_GetGlobal_s64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_GetGlobal)
</UL>
<P><STRONG><a name="[59]"></a>op_GetGlobal_s32</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_GetGlobal_s32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_GetGlobal_s32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_GetGlobal)
</UL>
<P><STRONG><a name="[61]"></a>op_SetGlobal_s64</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_s64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_SetGlobal_s64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_SetGlobal)
</UL>
<P><STRONG><a name="[62]"></a>op_SetGlobal_s32</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_s32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_SetGlobal_s32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_SetGlobal)
</UL>
<P><STRONG><a name="[4b]"></a>op_Branch</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, m3_compile.o(.text.op_Branch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_Branch
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m3_compile.o(.text.EmitPatchingBranch)
<LI> m3_compile.o(.text.CompileElseBlock)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[4d]"></a>op_BranchIfPrologue_r</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_BranchIfPrologue_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_BranchIfPrologue_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Branch)
</UL>
<P><STRONG><a name="[4e]"></a>op_BranchIfPrologue_s</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, m3_compile.o(.text.op_BranchIfPrologue_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_BranchIfPrologue_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Branch)
</UL>
<P><STRONG><a name="[4f]"></a>op_ContinueLoop</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, m3_compile.o(.text.op_ContinueLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = op_ContinueLoop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Branch)
<LI> m3_compile.o(.text.Compile_BranchTable)
</UL>
<P><STRONG><a name="[50]"></a>op_ContinueLoopIf</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_ContinueLoopIf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_ContinueLoopIf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Branch)
</UL>
<P><STRONG><a name="[51]"></a>op_BranchIf_r</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_BranchIf_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_BranchIf_r
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Branch)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[52]"></a>op_BranchIf_s</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, m3_compile.o(.text.op_BranchIf_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_BranchIf_s
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Branch)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[54]"></a>op_BranchTable</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, m3_compile.o(.text.op_BranchTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_BranchTable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_BranchTable)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[55]"></a>op_Call</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, m3_compile.o(.text.op_Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = op_Call &rArr; Call
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
</UL>
<BR>[Address Reference Count : 3]<UL><LI> m3_compile.o(.text.Compile_Call)
<LI> m3_compile.o(.text.op_Compile)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[56]"></a>op_Compile</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, m3_compile.o(.text.op_Compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = op_Compile &rArr; CompileFunction &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Call)
</UL>
<P><STRONG><a name="[2ef]"></a>Call</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, m3_compile.o(.text.Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Call
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_CallIndirect
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_Call
</UL>

<P><STRONG><a name="[57]"></a>op_CallIndirect</STRONG> (Thumb, 356 bytes, Stack size 96 bytes, m3_compile.o(.text.op_CallIndirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = op_CallIndirect &rArr; CompileFunction &rArr; CompileBlockStatements &rArr; Compile_Operator &rArr; PreserveRegisterIfOccupied &rArr; EmitOp &rArr; BridgeToNewPageIfNecessary &rArr; EnsureCodePageNumLines &rArr; AcquireCodePageWithCapacity &rArr; NewCodePage &rArr; m3_Malloc &rArr; calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Call
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompileFunction
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_CallIndirect)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[60]"></a>op_MemSize</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, m3_compile.o(.text.op_MemSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_MemSize
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Memory_Size)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[5f]"></a>op_MemGrow</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, m3_compile.o(.text.op_MemGrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = op_MemGrow &rArr; ResizeMemory &rArr; m3_Realloc &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResizeMemory
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Memory_Grow)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[5d]"></a>op_MemCopy</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, m3_compile.o(.text.op_MemCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_MemCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Memory_CopyFill)
</UL>
<P><STRONG><a name="[5e]"></a>op_MemFill</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, m3_compile.o(.text.op_MemFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = op_MemFill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_Memory_CopyFill)
</UL>
<P><STRONG><a name="[33e]"></a>ReadBlockType</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, m3_compile.o(.text.ReadBlockType))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReadBlockType &rArr; ReadLebSigned
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalizeType
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLebSigned
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_LoopOrBlock
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compile_If
</UL>

<P><STRONG><a name="[5c]"></a>op_Loop</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_Loop
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_LoopOrBlock)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[5a]"></a>op_If_r</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_If_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_If_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_If)
</UL>
<P><STRONG><a name="[5b]"></a>op_If_s</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, m3_compile.o(.text.op_If_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_If_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.Compile_If)
</UL>
<P><STRONG><a name="[63]"></a>op_Unreachable</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, m3_compile.o(.text.op_Unreachable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = op_Unreachable
</UL>
<BR>[Address Reference Count : 2]<UL><LI> m3_compile.o(.text.Compile_Unreachable)
<LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[90]"></a>op_i32_Load_i32_r</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i32_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[91]"></a>op_i32_Load_i32_s</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[93]"></a>op_i64_Load_i64_r</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Load_i64_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Load_i64_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[94]"></a>op_i64_Load_i64_s</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i64_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i64_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[95]"></a>op_f32_Load_f32_r</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f32_Load_f32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Load_f32_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[96]"></a>op_f32_Load_f32_s</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f32_Load_f32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Load_f32_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[97]"></a>op_f64_Load_f64_r</STRONG> (Thumb, 186 bytes, Stack size 96 bytes, m3_compile.o(.text.op_f64_Load_f64_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Load_f64_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[98]"></a>op_f64_Load_f64_s</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f64_Load_f64_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Load_f64_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[99]"></a>op_i32_Load_i8_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i8_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i8_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9a]"></a>op_i32_Load_i8_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i8_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i8_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9b]"></a>op_i32_Load_u8_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_u8_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_u8_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9c]"></a>op_i32_Load_u8_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_u8_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_u8_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9d]"></a>op_i32_Load_i16_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i16_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i16_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9e]"></a>op_i32_Load_i16_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_i16_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_i16_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[9f]"></a>op_i32_Load_u16_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_u16_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_u16_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a0]"></a>op_i32_Load_u16_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Load_u16_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Load_u16_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a1]"></a>op_i64_Load_i8_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i8_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i8_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a2]"></a>op_i64_Load_i8_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i8_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i8_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a3]"></a>op_i64_Load_u8_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u8_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u8_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a4]"></a>op_i64_Load_u8_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u8_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u8_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a5]"></a>op_i64_Load_i16_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i16_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i16_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a6]"></a>op_i64_Load_i16_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i16_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i16_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a7]"></a>op_i64_Load_u16_r</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u16_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u16_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a8]"></a>op_i64_Load_u16_s</STRONG> (Thumb, 196 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u16_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u16_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[a9]"></a>op_i64_Load_i32_r</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i32_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[aa]"></a>op_i64_Load_i32_s</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_i32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_i32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ab]"></a>op_i64_Load_u32_r</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u32_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ac]"></a>op_i64_Load_u32_s</STRONG> (Thumb, 192 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Load_u32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Load_u32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ad]"></a>op_i32_Store_i32_rs</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Store_i32_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Store_i32_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ae]"></a>op_i32_Store_i32_sr</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_i32_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_i32_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[af]"></a>op_i32_Store_i32_ss</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_i32_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_i32_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b0]"></a>op_i64_Store_i64_rs</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Store_i64_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Store_i64_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b1]"></a>op_i64_Store_i64_sr</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i64_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i64_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b2]"></a>op_i64_Store_i64_ss</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i64_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i64_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b3]"></a>op_f32_Store_f32_rs</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f32_Store_f32_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_f32_Store_f32_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b4]"></a>op_f32_Store_f32_sr</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, m3_compile.o(.text.op_f32_Store_f32_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Store_f32_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b5]"></a>op_f32_Store_f32_ss</STRONG> (Thumb, 204 bytes, Stack size 96 bytes, m3_compile.o(.text.op_f32_Store_f32_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Store_f32_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b6]"></a>op_f32_Store_f32_rr</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f32_Store_f32_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_f32_Store_f32_rr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b7]"></a>op_f64_Store_f64_rs</STRONG> (Thumb, 198 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f64_Store_f64_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Store_f64_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b8]"></a>op_f64_Store_f64_sr</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, m3_compile.o(.text.op_f64_Store_f64_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Store_f64_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[b9]"></a>op_f64_Store_f64_ss</STRONG> (Thumb, 222 bytes, Stack size 96 bytes, m3_compile.o(.text.op_f64_Store_f64_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Store_f64_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ba]"></a>op_f64_Store_f64_rr</STRONG> (Thumb, 186 bytes, Stack size 88 bytes, m3_compile.o(.text.op_f64_Store_f64_rr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Store_f64_rr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[bb]"></a>op_i32_Store_u8_rs</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Store_u8_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Store_u8_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[bc]"></a>op_i32_Store_u8_sr</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_u8_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_u8_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[bd]"></a>op_i32_Store_u8_ss</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_u8_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_u8_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[be]"></a>op_i32_Store_i16_rs</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i32_Store_i16_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Store_i16_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[bf]"></a>op_i32_Store_i16_sr</STRONG> (Thumb, 196 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_i16_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_i16_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c0]"></a>op_i32_Store_i16_ss</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i32_Store_i16_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Store_i16_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c1]"></a>op_i64_Store_u8_rs</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Store_u8_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Store_u8_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c2]"></a>op_i64_Store_u8_sr</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_u8_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_u8_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c3]"></a>op_i64_Store_u8_ss</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_u8_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_u8_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c4]"></a>op_i64_Store_i16_rs</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Store_i16_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Store_i16_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c5]"></a>op_i64_Store_i16_sr</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i16_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i16_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c6]"></a>op_i64_Store_i16_ss</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i16_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i16_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c7]"></a>op_i64_Store_i32_rs</STRONG> (Thumb, 188 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Store_i32_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Store_i32_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c8]"></a>op_i64_Store_i32_sr</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i32_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i32_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[c9]"></a>op_i64_Store_i32_ss</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, m3_compile.o(.text.op_i64_Store_i32_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Store_i32_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d0]"></a>op_i32_EqualToZero_r</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_EqualToZero_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i32_EqualToZero_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d1]"></a>op_i32_EqualToZero_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_EqualToZero_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_EqualToZero_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d2]"></a>op_i32_Equal_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Equal_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Equal_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d3]"></a>op_i32_Equal_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Equal_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Equal_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d4]"></a>op_i32_NotEqual_rs</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_NotEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_NotEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d5]"></a>op_i32_NotEqual_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_NotEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_NotEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d6]"></a>op_i32_LessThan_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d7]"></a>op_i32_LessThan_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d8]"></a>op_i32_LessThan_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[d9]"></a>op_u32_LessThan_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[da]"></a>op_u32_LessThan_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[db]"></a>op_u32_LessThan_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[dc]"></a>op_i32_GreaterThan_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[dd]"></a>op_i32_GreaterThan_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[de]"></a>op_i32_GreaterThan_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[df]"></a>op_u32_GreaterThan_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e0]"></a>op_u32_GreaterThan_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e1]"></a>op_u32_GreaterThan_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e2]"></a>op_i32_LessThanOrEqual_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e3]"></a>op_i32_LessThanOrEqual_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e4]"></a>op_i32_LessThanOrEqual_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_LessThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e5]"></a>op_u32_LessThanOrEqual_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e6]"></a>op_u32_LessThanOrEqual_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e7]"></a>op_u32_LessThanOrEqual_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_LessThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e8]"></a>op_i32_GreaterThanOrEqual_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[e9]"></a>op_i32_GreaterThanOrEqual_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ea]"></a>op_i32_GreaterThanOrEqual_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_GreaterThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[eb]"></a>op_u32_GreaterThanOrEqual_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ec]"></a>op_u32_GreaterThanOrEqual_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ed]"></a>op_u32_GreaterThanOrEqual_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_GreaterThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ee]"></a>op_i64_EqualToZero_r</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_EqualToZero_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_EqualToZero_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ef]"></a>op_i64_EqualToZero_s</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_EqualToZero_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_EqualToZero_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f0]"></a>op_i64_Equal_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Equal_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Equal_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f1]"></a>op_i64_Equal_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Equal_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_Equal_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f2]"></a>op_i64_NotEqual_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_NotEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_NotEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f3]"></a>op_i64_NotEqual_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_NotEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_NotEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f4]"></a>op_i64_LessThan_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_LessThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f5]"></a>op_i64_LessThan_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_LessThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f6]"></a>op_i64_LessThan_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_LessThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f7]"></a>op_u64_LessThan_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_LessThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f8]"></a>op_u64_LessThan_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_LessThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[f9]"></a>op_u64_LessThan_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_LessThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[fa]"></a>op_i64_GreaterThan_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_GreaterThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[fb]"></a>op_i64_GreaterThan_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_GreaterThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[fc]"></a>op_i64_GreaterThan_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_GreaterThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[fd]"></a>op_u64_GreaterThan_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_GreaterThan_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[fe]"></a>op_u64_GreaterThan_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_GreaterThan_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[ff]"></a>op_u64_GreaterThan_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_GreaterThan_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[100]"></a>op_i64_LessThanOrEqual_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_LessThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[101]"></a>op_i64_LessThanOrEqual_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_LessThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[102]"></a>op_i64_LessThanOrEqual_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_LessThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[103]"></a>op_u64_LessThanOrEqual_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_LessThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[104]"></a>op_u64_LessThanOrEqual_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_LessThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[105]"></a>op_u64_LessThanOrEqual_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_LessThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[106]"></a>op_i64_GreaterThanOrEqual_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_GreaterThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[107]"></a>op_i64_GreaterThanOrEqual_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_GreaterThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[108]"></a>op_i64_GreaterThanOrEqual_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_GreaterThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[109]"></a>op_u64_GreaterThanOrEqual_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_GreaterThanOrEqual_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10a]"></a>op_u64_GreaterThanOrEqual_sr</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_GreaterThanOrEqual_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10b]"></a>op_u64_GreaterThanOrEqual_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_GreaterThanOrEqual_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10c]"></a>op_f32_Equal_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Equal_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Equal_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10d]"></a>op_f32_Equal_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Equal_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_Equal_ss &rArr; __aeabi_fcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10e]"></a>op_f32_NotEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_NotEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_NotEqual_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[10f]"></a>op_f32_NotEqual_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_NotEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_NotEqual_ss &rArr; __aeabi_fcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[110]"></a>op_f32_LessThan_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_LessThan_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[111]"></a>op_f32_LessThan_sr</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_LessThan_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[112]"></a>op_f32_LessThan_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_LessThan_ss &rArr; __aeabi_fcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[113]"></a>op_f32_GreaterThan_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_GreaterThan_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[114]"></a>op_f32_GreaterThan_sr</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_GreaterThan_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[115]"></a>op_f32_GreaterThan_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_GreaterThan_ss &rArr; __aeabi_fcmpgt
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[116]"></a>op_f32_LessThanOrEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_LessThanOrEqual_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[117]"></a>op_f32_LessThanOrEqual_sr</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_LessThanOrEqual_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[118]"></a>op_f32_LessThanOrEqual_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_LessThanOrEqual_ss &rArr; __aeabi_fcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[119]"></a>op_f32_GreaterThanOrEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_GreaterThanOrEqual_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11a]"></a>op_f32_GreaterThanOrEqual_sr</STRONG> (Thumb, 122 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_GreaterThanOrEqual_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11b]"></a>op_f32_GreaterThanOrEqual_ss</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_GreaterThanOrEqual_ss &rArr; __aeabi_fcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11c]"></a>op_f64_Equal_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Equal_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_Equal_rs &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11d]"></a>op_f64_Equal_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Equal_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Equal_ss &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11e]"></a>op_f64_NotEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_NotEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_NotEqual_rs &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[11f]"></a>op_f64_NotEqual_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_NotEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_NotEqual_ss &rArr; __aeabi_dcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[120]"></a>op_f64_LessThan_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_LessThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_LessThan_rs &rArr; __aeabi_dcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[121]"></a>op_f64_LessThan_sr</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_LessThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_LessThan_sr &rArr; __aeabi_dcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[122]"></a>op_f64_LessThan_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_LessThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_LessThan_ss &rArr; __aeabi_dcmplt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[123]"></a>op_f64_GreaterThan_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_GreaterThan_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_GreaterThan_rs &rArr; __aeabi_dcmpgt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[124]"></a>op_f64_GreaterThan_sr</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_GreaterThan_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_GreaterThan_sr &rArr; __aeabi_dcmpgt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[125]"></a>op_f64_GreaterThan_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_GreaterThan_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_GreaterThan_ss &rArr; __aeabi_dcmpgt
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[126]"></a>op_f64_LessThanOrEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_LessThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_LessThanOrEqual_rs &rArr; __aeabi_dcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[127]"></a>op_f64_LessThanOrEqual_sr</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_LessThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_LessThanOrEqual_sr &rArr; __aeabi_dcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[128]"></a>op_f64_LessThanOrEqual_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_LessThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_LessThanOrEqual_ss &rArr; __aeabi_dcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[129]"></a>op_f64_GreaterThanOrEqual_rs</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_GreaterThanOrEqual_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_GreaterThanOrEqual_rs &rArr; __aeabi_dcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12a]"></a>op_f64_GreaterThanOrEqual_sr</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_GreaterThanOrEqual_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_GreaterThanOrEqual_sr &rArr; __aeabi_dcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12b]"></a>op_f64_GreaterThanOrEqual_ss</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_GreaterThanOrEqual_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_GreaterThanOrEqual_ss &rArr; __aeabi_dcmpge
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12c]"></a>op_u32_Clz_r</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Clz_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Clz_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12d]"></a>op_u32_Clz_s</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Clz_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Clz_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12e]"></a>op_u32_Ctz_r</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Ctz_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Ctz_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[12f]"></a>op_u32_Ctz_s</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Ctz_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Ctz_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[130]"></a>op_u32_Popcnt_r</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u32_Popcnt_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_u32_Popcnt_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[131]"></a>op_u32_Popcnt_s</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Popcnt_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Popcnt_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[132]"></a>op_i32_Add_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Add_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Add_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[133]"></a>op_i32_Add_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Add_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Add_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[134]"></a>op_i32_Subtract_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Subtract_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Subtract_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[135]"></a>op_i32_Subtract_sr</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Subtract_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Subtract_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[136]"></a>op_i32_Subtract_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Subtract_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Subtract_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[137]"></a>op_i32_Multiply_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Multiply_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Multiply_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[138]"></a>op_i32_Multiply_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Multiply_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Multiply_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[139]"></a>op_i32_Divide_rs</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Divide_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13a]"></a>op_i32_Divide_sr</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Divide_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13b]"></a>op_i32_Divide_ss</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i32_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i32_Divide_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13c]"></a>op_u32_Divide_rs</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Divide_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13d]"></a>op_u32_Divide_sr</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Divide_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13e]"></a>op_u32_Divide_ss</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Divide_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[13f]"></a>op_i32_Remainder_rs</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Remainder_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Remainder_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[140]"></a>op_i32_Remainder_sr</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Remainder_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Remainder_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[141]"></a>op_i32_Remainder_ss</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i32_Remainder_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i32_Remainder_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[142]"></a>op_u32_Remainder_rs</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Remainder_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Remainder_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[143]"></a>op_u32_Remainder_sr</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Remainder_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Remainder_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[144]"></a>op_u32_Remainder_ss</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Remainder_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Remainder_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[145]"></a>op_u32_And_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_And_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_And_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[146]"></a>op_u32_And_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_And_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_And_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[147]"></a>op_u32_Or_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Or_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Or_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[148]"></a>op_u32_Or_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Or_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Or_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[149]"></a>op_u32_Xor_rs</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Xor_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Xor_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14a]"></a>op_u32_Xor_ss</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Xor_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_Xor_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14b]"></a>op_u32_ShiftLeft_rs</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftLeft_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftLeft_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14c]"></a>op_u32_ShiftLeft_sr</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftLeft_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftLeft_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14d]"></a>op_u32_ShiftLeft_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftLeft_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftLeft_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14e]"></a>op_i32_ShiftRight_rs</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_ShiftRight_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_ShiftRight_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[14f]"></a>op_i32_ShiftRight_sr</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_ShiftRight_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_ShiftRight_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[150]"></a>op_i32_ShiftRight_ss</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_ShiftRight_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_ShiftRight_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[151]"></a>op_u32_ShiftRight_rs</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftRight_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftRight_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[152]"></a>op_u32_ShiftRight_sr</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftRight_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftRight_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[153]"></a>op_u32_ShiftRight_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_ShiftRight_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u32_ShiftRight_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[154]"></a>op_u32_Rotl_rs</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotl_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotl_rs &rArr; rotl32
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3dd]"></a>rotl32</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, m3_compile.o(.text.rotl32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rotl32
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotl_ss
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotl_sr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotl_rs
</UL>

<P><STRONG><a name="[155]"></a>op_u32_Rotl_sr</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotl_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotl_sr &rArr; rotl32
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[156]"></a>op_u32_Rotl_ss</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotl_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotl_ss &rArr; rotl32
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[157]"></a>op_u32_Rotr_rs</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotr_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotr_rs &rArr; rotr32
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3de]"></a>rotr32</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, m3_compile.o(.text.rotr32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rotr32
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotr_ss
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotr_sr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Rotr_rs
</UL>

<P><STRONG><a name="[158]"></a>op_u32_Rotr_sr</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotr_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotr_sr &rArr; rotr32
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[159]"></a>op_u32_Rotr_ss</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Rotr_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = op_u32_Rotr_ss &rArr; rotr32
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15a]"></a>op_u64_Clz_r</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Clz_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_Clz_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15b]"></a>op_u64_Clz_s</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Clz_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_Clz_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15c]"></a>op_u64_Ctz_r</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Ctz_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_Ctz_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15d]"></a>op_u64_Ctz_s</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Ctz_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_Ctz_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15e]"></a>op_u64_Popcnt_r</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u64_Popcnt_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_u64_Popcnt_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[15f]"></a>op_u64_Popcnt_s</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Popcnt_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_Popcnt_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[160]"></a>op_i64_Add_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Add_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Add_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[161]"></a>op_i64_Add_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Add_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_Add_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[162]"></a>op_i64_Subtract_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Subtract_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Subtract_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[163]"></a>op_i64_Subtract_sr</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Subtract_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Subtract_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[164]"></a>op_i64_Subtract_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Subtract_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_Subtract_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[165]"></a>op_i64_Multiply_rs</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Multiply_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Multiply_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[166]"></a>op_i64_Multiply_ss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Multiply_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_Multiply_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[167]"></a>op_i64_Divide_rs</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Divide_rs &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[168]"></a>op_i64_Divide_sr</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Divide_sr &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[169]"></a>op_i64_Divide_ss</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i64_Divide_ss &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16a]"></a>op_u64_Divide_rs</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_u64_Divide_rs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16b]"></a>op_u64_Divide_sr</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_u64_Divide_sr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16c]"></a>op_u64_Divide_ss</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_u64_Divide_ss &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16d]"></a>op_i64_Remainder_rs</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Remainder_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Remainder_rs &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16e]"></a>op_i64_Remainder_sr</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Remainder_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Remainder_sr &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[16f]"></a>op_i64_Remainder_ss</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, m3_compile.o(.text.op_i64_Remainder_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i64_Remainder_ss &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[170]"></a>op_u64_Remainder_rs</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Remainder_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_u64_Remainder_rs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[171]"></a>op_u64_Remainder_sr</STRONG> (Thumb, 150 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Remainder_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_u64_Remainder_sr &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[172]"></a>op_u64_Remainder_ss</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Remainder_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_u64_Remainder_ss &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[173]"></a>op_u64_And_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_And_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_And_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[174]"></a>op_u64_And_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_And_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_And_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[175]"></a>op_u64_Or_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Or_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_Or_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[176]"></a>op_u64_Or_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Or_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_Or_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[177]"></a>op_u64_Xor_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Xor_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_Xor_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[178]"></a>op_u64_Xor_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Xor_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_Xor_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[179]"></a>op_u64_ShiftLeft_rs</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_ShiftLeft_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_ShiftLeft_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17a]"></a>op_u64_ShiftLeft_sr</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_ShiftLeft_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_ShiftLeft_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17b]"></a>op_u64_ShiftLeft_ss</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_ShiftLeft_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_ShiftLeft_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17c]"></a>op_i64_ShiftRight_rs</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_ShiftRight_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_ShiftRight_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17d]"></a>op_i64_ShiftRight_sr</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_ShiftRight_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_ShiftRight_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17e]"></a>op_i64_ShiftRight_ss</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_ShiftRight_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_i64_ShiftRight_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[17f]"></a>op_u64_ShiftRight_rs</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_ShiftRight_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_ShiftRight_rs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[180]"></a>op_u64_ShiftRight_sr</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_ShiftRight_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_u64_ShiftRight_sr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[181]"></a>op_u64_ShiftRight_ss</STRONG> (Thumb, 176 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_ShiftRight_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_u64_ShiftRight_ss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[182]"></a>op_u64_Rotl_rs</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Rotl_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_Rotl_rs &rArr; rotl64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3e1]"></a>rotl64</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, m3_compile.o(.text.rotl64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rotl64
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotl_ss
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotl_sr
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotl_rs
</UL>

<P><STRONG><a name="[183]"></a>op_u64_Rotl_sr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Rotl_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_Rotl_sr &rArr; rotl64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[184]"></a>op_u64_Rotl_ss</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Rotl_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Rotl_ss &rArr; rotl64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotl64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[185]"></a>op_u64_Rotr_rs</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Rotr_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_Rotr_rs &rArr; rotr64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3e2]"></a>rotr64</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, m3_compile.o(.text.rotr64))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rotr64
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotr_ss
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotr_sr
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Rotr_rs
</UL>

<P><STRONG><a name="[186]"></a>op_u64_Rotr_sr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Rotr_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_Rotr_sr &rArr; rotr64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[187]"></a>op_u64_Rotr_ss</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Rotr_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Rotr_ss &rArr; rotr64
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotr64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[188]"></a>op_f32_Abs_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Abs_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Abs_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[189]"></a>op_f32_Abs_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Abs_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Abs_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18a]"></a>op_f32_Negate_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Negate_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Negate_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18b]"></a>op_f32_Negate_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Negate_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Negate_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18c]"></a>op_f32_Ceil_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Ceil_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Ceil_r &rArr; ceilf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18d]"></a>op_f32_Ceil_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Ceil_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f32_Ceil_s &rArr; ceilf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceilf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18e]"></a>op_f32_Floor_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Floor_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Floor_r &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[18f]"></a>op_f32_Floor_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Floor_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f32_Floor_s &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[190]"></a>op_f32_Trunc_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Trunc_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Trunc_r &rArr; truncf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[191]"></a>op_f32_Trunc_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Trunc_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Trunc_s &rArr; truncf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;truncf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[192]"></a>op_f32_Nearest_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Nearest_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Nearest_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[193]"></a>op_f32_Nearest_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Nearest_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Nearest_s &rArr; rintf &rArr; _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rintf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[194]"></a>op_f32_Sqrt_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Sqrt_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f32_Sqrt_r &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[195]"></a>op_f32_Sqrt_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Sqrt_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_f32_Sqrt_s &rArr; sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[196]"></a>op_f32_Add_rs</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Add_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Add_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[197]"></a>op_f32_Add_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Add_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Add_ss &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[198]"></a>op_f32_Subtract_rs</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Subtract_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Subtract_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[199]"></a>op_f32_Subtract_sr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Subtract_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Subtract_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19a]"></a>op_f32_Subtract_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Subtract_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Subtract_ss &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19b]"></a>op_f32_Multiply_rs</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Multiply_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Multiply_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19c]"></a>op_f32_Multiply_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Multiply_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Multiply_ss &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19d]"></a>op_f32_Divide_rs</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Divide_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19e]"></a>op_f32_Divide_sr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Divide_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[19f]"></a>op_f32_Divide_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Divide_ss &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a0]"></a>op_f32_Min_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Min_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f32_Min_rs &rArr; min_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3b3]"></a>min_f32</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, m3_compile.o(.text.min_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = min_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbitf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Min_ss
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Min_rs
</UL>

<P><STRONG><a name="[1a1]"></a>op_f32_Min_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Min_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f32_Min_ss &rArr; min_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a2]"></a>op_f32_Max_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Max_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f32_Max_rs &rArr; max_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3a8]"></a>max_f32</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, m3_compile.o(.text.max_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = max_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbitf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Max_ss
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_Max_rs
</UL>

<P><STRONG><a name="[1a3]"></a>op_f32_Max_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Max_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f32_Max_ss &rArr; max_f32 &rArr; __ARM_isnan
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a4]"></a>op_f32_CopySign_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_CopySign_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_CopySign_rs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysignf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3bc]"></a>copysignf</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, m3_compile.o(.text.copysignf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copysignf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_ss
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_sr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f32_CopySign_rs
</UL>

<P><STRONG><a name="[1a5]"></a>op_f32_CopySign_sr</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_CopySign_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_CopySign_sr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysignf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a6]"></a>op_f32_CopySign_ss</STRONG> (Thumb, 128 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_CopySign_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_CopySign_ss &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysignf
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a7]"></a>op_f64_Abs_r</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Abs_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Abs_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a8]"></a>op_f64_Abs_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Abs_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Abs_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1a9]"></a>op_f64_Negate_r</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Negate_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Negate_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1aa]"></a>op_f64_Negate_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Negate_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Negate_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ab]"></a>op_f64_Ceil_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Ceil_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Ceil_r &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ac]"></a>op_f64_Ceil_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Ceil_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f64_Ceil_s &rArr; ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ad]"></a>op_f64_Floor_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Floor_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Floor_r &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ae]"></a>op_f64_Floor_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Floor_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f64_Floor_s &rArr; floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1af]"></a>op_f64_Trunc_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Trunc_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = op_f64_Trunc_r &rArr; trunc &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b0]"></a>op_f64_Trunc_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Trunc_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f64_Trunc_s &rArr; trunc &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b1]"></a>op_f64_Nearest_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Nearest_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Nearest_r &rArr; rint &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b2]"></a>op_f64_Nearest_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Nearest_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Nearest_s &rArr; rint &rArr; _drnd &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b3]"></a>op_f64_Sqrt_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Sqrt_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = op_f64_Sqrt_r &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b4]"></a>op_f64_Sqrt_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Sqrt_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = op_f64_Sqrt_s &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b5]"></a>op_f64_Add_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Add_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Add_rs &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b6]"></a>op_f64_Add_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Add_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Add_ss &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b7]"></a>op_f64_Subtract_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Subtract_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Subtract_rs &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b8]"></a>op_f64_Subtract_sr</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Subtract_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Subtract_sr &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1b9]"></a>op_f64_Subtract_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Subtract_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f64_Subtract_ss &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ba]"></a>op_f64_Multiply_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Multiply_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Multiply_rs &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1bb]"></a>op_f64_Multiply_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Multiply_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f64_Multiply_ss &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1bc]"></a>op_f64_Divide_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Divide_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Divide_rs &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1bd]"></a>op_f64_Divide_sr</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Divide_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f64_Divide_sr &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1be]"></a>op_f64_Divide_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Divide_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_f64_Divide_ss &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1bf]"></a>op_f64_Min_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Min_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = op_f64_Min_rs &rArr; min_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3b4]"></a>min_f64</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, m3_compile.o(.text.min_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = min_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbitf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Min_ss
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Min_rs
</UL>

<P><STRONG><a name="[1c0]"></a>op_f64_Min_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Min_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = op_f64_Min_ss &rArr; min_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c1]"></a>op_f64_Max_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Max_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = op_f64_Max_rs &rArr; max_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3b0]"></a>max_f64</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, m3_compile.o(.text.max_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = max_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbit
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_signbitf
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Max_ss
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_Max_rs
</UL>

<P><STRONG><a name="[1c2]"></a>op_f64_Max_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_Max_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = op_f64_Max_ss &rArr; max_f64 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c3]"></a>op_f64_CopySign_rs</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_CopySign_rs))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_CopySign_rs &rArr; copysign
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3cd]"></a>copysign</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, m3_compile.o(.text.copysign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copysign
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_CopySign_ss
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_CopySign_sr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_f64_CopySign_rs
</UL>

<P><STRONG><a name="[1c4]"></a>op_f64_CopySign_sr</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_CopySign_sr))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_CopySign_sr &rArr; copysign
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c5]"></a>op_f64_CopySign_ss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_f64_CopySign_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_CopySign_ss &rArr; copysign
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copysign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c6]"></a>op_i32_Wrap_i64_r</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_Wrap_i64_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i32_Wrap_i64_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c7]"></a>op_i32_Wrap_i64_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Wrap_i64_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Wrap_i64_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1c8]"></a>op_i32_Trunc_f32_r_r</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Trunc_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3a9]"></a>__ARM_isnanf</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, m3_compile.o(.text.__ARM_isnanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_isnanf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_s
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_s_r
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_s
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f32_r_r
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_s
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_s_r
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_s
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f32_r_r
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_s
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_s_r
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_s
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f32_r_r
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_s
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_s_r
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_s
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f32_r_r
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_s
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_s_r
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_s
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f32_r_r
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_s
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_s_r
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_s
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f32_r_r
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_s
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_s_r
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_s
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f32_r_r
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_s_r
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f32_r_r
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
</UL>

<P><STRONG><a name="[1c9]"></a>op_i32_Trunc_f32_r_s</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_Trunc_f32_r_s &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ca]"></a>op_i32_Trunc_f32_s_r</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Trunc_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1cb]"></a>op_i32_Trunc_f32_s_s</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i32_Trunc_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_Trunc_f32_s_s &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1cd]"></a>op_u32_Trunc_f32_r_r</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_Trunc_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ce]"></a>op_u32_Trunc_f32_r_s</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u32_Trunc_f32_r_s &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1cf]"></a>op_u32_Trunc_f32_s_r</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_Trunc_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d0]"></a>op_u32_Trunc_f32_s_s</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u32_Trunc_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u32_Trunc_f32_s_s &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d1]"></a>op_i32_Trunc_f64_r_r</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Trunc_f64_r_r &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[3ab]"></a>__ARM_isnan</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, m3_compile.o(.text.__ARM_isnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_isnan
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_s
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_s_r
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_s
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_TruncSat_f64_r_r
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_s
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_s_r
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_s
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_TruncSat_f64_r_r
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_s
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_s_r
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_s
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_TruncSat_f64_r_r
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_s
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_s_r
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_s
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_TruncSat_f64_r_r
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_s
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_s_r
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_s
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u64_Trunc_f64_r_r
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_s
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_s_r
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_s
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i64_Trunc_f64_r_r
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_s
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_s_r
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_s
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_u32_Trunc_f64_r_r
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_s
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_s_r
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_s
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_i32_Trunc_f64_r_r
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
</UL>

<P><STRONG><a name="[1d2]"></a>op_i32_Trunc_f64_r_s</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Trunc_f64_r_s &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d3]"></a>op_i32_Trunc_f64_s_r</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Trunc_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Trunc_f64_s_r &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d4]"></a>op_i32_Trunc_f64_s_s</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i32_Trunc_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i32_Trunc_f64_s_s &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d5]"></a>op_u32_Trunc_f64_r_r</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_Trunc_f64_r_r &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d6]"></a>op_u32_Trunc_f64_r_s</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_Trunc_f64_r_s &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d7]"></a>op_u32_Trunc_f64_s_r</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_Trunc_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_Trunc_f64_s_r &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d8]"></a>op_u32_Trunc_f64_s_s</STRONG> (Thumb, 238 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u32_Trunc_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_u32_Trunc_f64_s_s &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1d9]"></a>op_i64_Extend_i32_r</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_Extend_i32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_Extend_i32_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1da]"></a>op_i64_Extend_i32_s</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Extend_i32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Extend_i32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1db]"></a>op_i64_Extend_u32_r</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_Extend_u32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_Extend_u32_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1dc]"></a>op_i64_Extend_u32_s</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Extend_u32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Extend_u32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1dd]"></a>op_i64_Trunc_f32_r_r</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Trunc_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Trunc_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1de]"></a>op_i64_Trunc_f32_r_s</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Trunc_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_Trunc_f32_r_s &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1df]"></a>op_i64_Trunc_f32_s_r</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Trunc_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Trunc_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e0]"></a>op_i64_Trunc_f32_s_s</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Trunc_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_Trunc_f32_s_s &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e1]"></a>op_u64_Trunc_f32_r_r</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Trunc_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e2]"></a>op_u64_Trunc_f32_r_s</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u64_Trunc_f32_r_s &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e3]"></a>op_u64_Trunc_f32_s_r</STRONG> (Thumb, 228 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Trunc_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e4]"></a>op_u64_Trunc_f32_s_s</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Trunc_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_Trunc_f32_s_s &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e5]"></a>op_i64_Trunc_f64_r_r</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Trunc_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_Trunc_f64_r_r &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e6]"></a>op_i64_Trunc_f64_r_s</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Trunc_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i64_Trunc_f64_r_s &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e7]"></a>op_i64_Trunc_f64_s_r</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Trunc_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i64_Trunc_f64_s_r &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e8]"></a>op_i64_Trunc_f64_s_s</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, m3_compile.o(.text.op_i64_Trunc_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_i64_Trunc_f64_s_s &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1e9]"></a>op_u64_Trunc_f64_r_r</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Trunc_f64_r_r &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ea]"></a>op_u64_Trunc_f64_r_s</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Trunc_f64_r_s &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1eb]"></a>op_u64_Trunc_f64_s_r</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_Trunc_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_Trunc_f64_s_r &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ec]"></a>op_u64_Trunc_f64_s_s</STRONG> (Thumb, 242 bytes, Stack size 80 bytes, m3_compile.o(.text.op_u64_Trunc_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_u64_Trunc_f64_s_s &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ed]"></a>op_f32_Convert_i32_r_r</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_i32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_Convert_i32_r_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ee]"></a>op_f32_Convert_i32_r_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_i32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Convert_i32_r_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ef]"></a>op_f32_Convert_i32_s_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_i32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f32_Convert_i32_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f0]"></a>op_f32_Convert_i32_s_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_i32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Convert_i32_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f1]"></a>op_f32_Convert_u32_r_r</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_u32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_Convert_u32_r_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f2]"></a>op_f32_Convert_u32_r_s</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_u32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Convert_u32_r_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f3]"></a>op_f32_Convert_u32_s_r</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_u32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f32_Convert_u32_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f4]"></a>op_f32_Convert_u32_s_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_u32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Convert_u32_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f5]"></a>op_f32_Convert_i64_r_r</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_i64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_Convert_i64_r_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f6]"></a>op_f32_Convert_i64_r_s</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_i64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Convert_i64_r_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f7]"></a>op_f32_Convert_i64_s_r</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_i64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f32_Convert_i64_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f8]"></a>op_f32_Convert_i64_s_s</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_i64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Convert_i64_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1f9]"></a>op_f32_Convert_u64_r_r</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_u64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f32_Convert_u64_r_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1fa]"></a>op_f32_Convert_u64_r_s</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_u64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Convert_u64_r_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1fb]"></a>op_f32_Convert_u64_s_r</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Convert_u64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f32_Convert_u64_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1fc]"></a>op_f32_Convert_u64_s_s</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Convert_u64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Convert_u64_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1fd]"></a>op_f32_Demote_f64_r</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f32_Demote_f64_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f32_Demote_f64_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1fe]"></a>op_f32_Demote_f64_s</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Demote_f64_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_f32_Demote_f64_s &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[1ff]"></a>op_f64_Convert_i32_r_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_i32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Convert_i32_r_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[200]"></a>op_f64_Convert_i32_r_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_i32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_i32_r_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[201]"></a>op_f64_Convert_i32_s_r</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_i32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Convert_i32_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[202]"></a>op_f64_Convert_i32_s_s</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_i32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_i32_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[203]"></a>op_f64_Convert_u32_r_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_u32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Convert_u32_r_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[204]"></a>op_f64_Convert_u32_r_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_u32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_u32_r_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[205]"></a>op_f64_Convert_u32_s_r</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_u32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_f64_Convert_u32_s_r
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[206]"></a>op_f64_Convert_u32_s_s</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_u32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_u32_s_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[207]"></a>op_f64_Convert_i64_r_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_i64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_i64_r_r &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[208]"></a>op_f64_Convert_i64_r_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_i64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_Convert_i64_r_s &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[209]"></a>op_f64_Convert_i64_s_r</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_i64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_i64_s_r &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20a]"></a>op_f64_Convert_i64_s_s</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_i64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_Convert_i64_s_s &rArr; __aeabi_l2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20b]"></a>op_f64_Convert_u64_r_r</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_u64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_u64_r_r &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20c]"></a>op_f64_Convert_u64_r_s</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_u64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_Convert_u64_r_s &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20d]"></a>op_f64_Convert_u64_s_r</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Convert_u64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Convert_u64_s_r &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20e]"></a>op_f64_Convert_u64_s_s</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Convert_u64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_f64_Convert_u64_s_s &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[20f]"></a>op_f64_Promote_f32_r</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, m3_compile.o(.text.op_f64_Promote_f32_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_f64_Promote_f32_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[210]"></a>op_f64_Promote_f32_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Promote_f32_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f64_Promote_f32_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[211]"></a>op_i32_Reinterpret_f32_r_r</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Reinterpret_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Reinterpret_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[212]"></a>op_i32_Reinterpret_f32_r_s</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Reinterpret_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Reinterpret_f32_r_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[213]"></a>op_i32_Reinterpret_f32_s_r</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Reinterpret_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_Reinterpret_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[214]"></a>op_i32_Reinterpret_f32_s_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Reinterpret_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Reinterpret_f32_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[215]"></a>op_i64_Reinterpret_f64_r_r</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Reinterpret_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Reinterpret_f64_r_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[216]"></a>op_i64_Reinterpret_f64_r_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Reinterpret_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Reinterpret_f64_r_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[217]"></a>op_i64_Reinterpret_f64_s_r</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Reinterpret_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Reinterpret_f64_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[218]"></a>op_i64_Reinterpret_f64_s_s</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Reinterpret_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Reinterpret_f64_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[219]"></a>op_f32_Reinterpret_i32_r_r</STRONG> (Thumb, 94 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Reinterpret_i32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Reinterpret_i32_r_r &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21a]"></a>op_f32_Reinterpret_i32_r_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Reinterpret_i32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_f32_Reinterpret_i32_r_s &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21b]"></a>op_f32_Reinterpret_i32_s_r</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Reinterpret_i32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Reinterpret_i32_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21c]"></a>op_f32_Reinterpret_i32_s_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f32_Reinterpret_i32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f32_Reinterpret_i32_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21d]"></a>op_f64_Reinterpret_i64_r_r</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Reinterpret_i64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Reinterpret_i64_r_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21e]"></a>op_f64_Reinterpret_i64_r_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Reinterpret_i64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Reinterpret_i64_r_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[21f]"></a>op_f64_Reinterpret_i64_s_r</STRONG> (Thumb, 118 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Reinterpret_i64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Reinterpret_i64_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[220]"></a>op_f64_Reinterpret_i64_s_s</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, m3_compile.o(.text.op_f64_Reinterpret_i64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_f64_Reinterpret_i64_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[221]"></a>op_i32_Extend8_s_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_Extend8_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i32_Extend8_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[222]"></a>op_i32_Extend8_s_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Extend8_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Extend8_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[223]"></a>op_i32_Extend16_s_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_Extend16_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i32_Extend16_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[224]"></a>op_i32_Extend16_s_s</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_Extend16_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i32_Extend16_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[225]"></a>op_i64_Extend8_s_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_Extend8_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_Extend8_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[226]"></a>op_i64_Extend8_s_s</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Extend8_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Extend8_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[227]"></a>op_i64_Extend16_s_r</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_Extend16_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_Extend16_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[228]"></a>op_i64_Extend16_s_s</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Extend16_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Extend16_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[229]"></a>op_i64_Extend32_s_r</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_Extend32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_i64_Extend32_s_r
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[22a]"></a>op_i64_Extend32_s_s</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_Extend32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_i64_Extend32_s_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operations)
</UL>
<P><STRONG><a name="[22c]"></a>op_i32_TruncSat_f32_r_r</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_TruncSat_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_TruncSat_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[22d]"></a>op_i32_TruncSat_f32_r_s</STRONG> (Thumb, 198 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_TruncSat_f32_r_s &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[22e]"></a>op_i32_TruncSat_f32_s_r</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_TruncSat_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[22f]"></a>op_i32_TruncSat_f32_s_s</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i32_TruncSat_f32_s_s &rArr; __aeabi_f2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[230]"></a>op_u32_TruncSat_f32_r_r</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u32_TruncSat_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u32_TruncSat_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[231]"></a>op_u32_TruncSat_f32_r_s</STRONG> (Thumb, 190 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u32_TruncSat_f32_r_s &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[232]"></a>op_u32_TruncSat_f32_s_r</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_TruncSat_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[233]"></a>op_u32_TruncSat_f32_s_s</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u32_TruncSat_f32_s_s &rArr; __aeabi_f2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[234]"></a>op_i32_TruncSat_f64_r_r</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i32_TruncSat_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i32_TruncSat_f64_r_r &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[235]"></a>op_i32_TruncSat_f64_r_s</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_TruncSat_f64_r_s &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[236]"></a>op_i32_TruncSat_f64_s_r</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_TruncSat_f64_s_r &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[237]"></a>op_i32_TruncSat_f64_s_s</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i32_TruncSat_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i32_TruncSat_f64_s_s &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[238]"></a>op_u32_TruncSat_f64_r_r</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u32_TruncSat_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u32_TruncSat_f64_r_r &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[239]"></a>op_u32_TruncSat_f64_r_s</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_TruncSat_f64_r_s &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23a]"></a>op_u32_TruncSat_f64_s_r</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_TruncSat_f64_s_r &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23b]"></a>op_u32_TruncSat_f64_s_s</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u32_TruncSat_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u32_TruncSat_f64_s_s &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23c]"></a>op_i64_TruncSat_f32_r_r</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_TruncSat_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_TruncSat_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23d]"></a>op_i64_TruncSat_f32_r_s</STRONG> (Thumb, 194 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_TruncSat_f32_r_s &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23e]"></a>op_i64_TruncSat_f32_s_r</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_TruncSat_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[23f]"></a>op_i64_TruncSat_f32_s_s</STRONG> (Thumb, 220 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_i64_TruncSat_f32_s_s &rArr; __aeabi_f2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2lz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[240]"></a>op_u64_TruncSat_f32_r_r</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u64_TruncSat_f32_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_TruncSat_f32_r_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[241]"></a>op_u64_TruncSat_f32_r_s</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f32_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u64_TruncSat_f32_r_s &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[242]"></a>op_u64_TruncSat_f32_s_r</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f32_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_TruncSat_f32_s_r &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[243]"></a>op_u64_TruncSat_f32_s_s</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f32_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = op_u64_TruncSat_f32_s_s &rArr; __aeabi_f2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[244]"></a>op_i64_TruncSat_f64_r_r</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, m3_compile.o(.text.op_i64_TruncSat_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_i64_TruncSat_f64_r_r &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[245]"></a>op_i64_TruncSat_f64_r_s</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_TruncSat_f64_r_s &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[246]"></a>op_i64_TruncSat_f64_s_r</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_TruncSat_f64_s_r &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[247]"></a>op_i64_TruncSat_f64_s_s</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, m3_compile.o(.text.op_i64_TruncSat_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_i64_TruncSat_f64_s_s &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[248]"></a>op_u64_TruncSat_f64_r_r</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, m3_compile.o(.text.op_u64_TruncSat_f64_r_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_u64_TruncSat_f64_r_r &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[249]"></a>op_u64_TruncSat_f64_r_s</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f64_r_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_TruncSat_f64_r_s &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[24a]"></a>op_u64_TruncSat_f64_s_r</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f64_s_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_TruncSat_f64_s_r &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[24b]"></a>op_u64_TruncSat_f64_s_s</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, m3_compile.o(.text.op_u64_TruncSat_f64_s_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_u64_TruncSat_f64_s_s &rArr; __aeabi_d2ulz
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnan
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_operationsFC)
</UL>
<P><STRONG><a name="[4c]"></a>op_Entry</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = op_Entry
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.text.CompileFunction)
</UL>
<P><STRONG><a name="[259]"></a>op_SetSlot_i32</STRONG> (Thumb, 96 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetSlot_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetSlot_i32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setSetOps)
</UL>
<P><STRONG><a name="[25a]"></a>op_SetSlot_i64</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetSlot_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetSlot_i64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setSetOps)
</UL>
<P><STRONG><a name="[25b]"></a>op_SetSlot_f32</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetSlot_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_SetSlot_f32 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setSetOps)
</UL>
<P><STRONG><a name="[25c]"></a>op_SetSlot_f64</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetSlot_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetSlot_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setSetOps)
</UL>
<P><STRONG><a name="[24d]"></a>op_PreserveSetSlot_i32</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, m3_compile.o(.text.op_PreserveSetSlot_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_PreserveSetSlot_i32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_preserveSetSlot)
</UL>
<P><STRONG><a name="[24e]"></a>op_PreserveSetSlot_i64</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, m3_compile.o(.text.op_PreserveSetSlot_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_PreserveSetSlot_i64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_preserveSetSlot)
</UL>
<P><STRONG><a name="[24f]"></a>op_PreserveSetSlot_f32</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, m3_compile.o(.text.op_PreserveSetSlot_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_PreserveSetSlot_f32 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_preserveSetSlot)
</UL>
<P><STRONG><a name="[250]"></a>op_PreserveSetSlot_f64</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, m3_compile.o(.text.op_PreserveSetSlot_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_PreserveSetSlot_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_preserveSetSlot)
</UL>
<P><STRONG><a name="[255]"></a>op_SetRegister_i32</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetRegister_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetRegister_i32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setRegisterOps)
</UL>
<P><STRONG><a name="[256]"></a>op_SetRegister_i64</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetRegister_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetRegister_i64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setRegisterOps)
</UL>
<P><STRONG><a name="[257]"></a>op_SetRegister_f32</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetRegister_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_SetRegister_f32 &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setRegisterOps)
</UL>
<P><STRONG><a name="[258]"></a>op_SetRegister_f64</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, m3_compile.o(.text.op_SetRegister_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_SetRegister_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setRegisterOps)
</UL>
<P><STRONG><a name="[251]"></a>op_SetGlobal_i32</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_i32))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_SetGlobal_i32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setGlobalOps)
</UL>
<P><STRONG><a name="[252]"></a>op_SetGlobal_i64</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_SetGlobal_i64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setGlobalOps)
</UL>
<P><STRONG><a name="[253]"></a>op_SetGlobal_f32</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = op_SetGlobal_f32 &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setGlobalOps)
</UL>
<P><STRONG><a name="[254]"></a>op_SetGlobal_f64</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, m3_compile.o(.text.op_SetGlobal_f64))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = op_SetGlobal_f64
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_setGlobalOps)
</UL>
<P><STRONG><a name="[6d]"></a>op_Select_f32_sss</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_sss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f32_sss &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[6e]"></a>op_Select_f32_srs</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_srs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_Select_f32_srs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[6f]"></a>op_Select_f32_ssr</STRONG> (Thumb, 150 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_ssr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_Select_f32_ssr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[70]"></a>op_Select_f32_rss</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_rss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f32_rss &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[71]"></a>op_Select_f32_rrs</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_rrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_Select_f32_rrs &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[72]"></a>op_Select_f32_rsr</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_f32_rsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = op_Select_f32_rsr &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[73]"></a>op_Select_f64_sss</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_sss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_sss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[74]"></a>op_Select_f64_srs</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_srs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_srs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[75]"></a>op_Select_f64_ssr</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_ssr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_ssr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[76]"></a>op_Select_f64_rss</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_rss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_rss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[77]"></a>op_Select_f64_rrs</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_rrs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_rrs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[78]"></a>op_Select_f64_rsr</STRONG> (Thumb, 150 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_f64_rsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_f64_rsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_fpSelectOps)
</UL>
<P><STRONG><a name="[79]"></a>op_Select_i32_rss</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_i32_rss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_Select_i32_rss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7a]"></a>op_Select_i32_srs</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_i32_srs))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_Select_i32_srs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7b]"></a>op_Select_i32_ssr</STRONG> (Thumb, 142 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_i32_ssr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_Select_i32_ssr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7c]"></a>op_Select_i32_sss</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, m3_compile.o(.text.op_Select_i32_sss))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = op_Select_i32_sss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7d]"></a>op_Select_i64_rss</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_i64_rss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_i64_rss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7e]"></a>op_Select_i64_srs</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_i64_srs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_i64_srs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[7f]"></a>op_Select_i64_ssr</STRONG> (Thumb, 162 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_i64_ssr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_i64_ssr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[80]"></a>op_Select_i64_sss</STRONG> (Thumb, 178 bytes, Stack size 96 bytes, m3_compile.o(.text.op_Select_i64_sss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = op_Select_i64_sss
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_compile.o(.rodata.c_intSelectOps)
</UL>
<P><STRONG><a name="[3ad]"></a>__ARM_signbitf</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, m3_compile.o(.text.__ARM_signbitf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_signbitf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
</UL>

<P><STRONG><a name="[3ae]"></a>__ARM_signbit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, m3_compile.o(.text.__ARM_signbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_signbit
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f64
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f64
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max_f32
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min_f32
</UL>

<P><STRONG><a name="[66]"></a>op_Branch</STRONG> (Thumb, 82 bytes, Stack size 64 bytes, m3_emit.o(.text.op_Branch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = op_Branch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m3_emit.o(.text.EnsureCodePageNumLines)
</UL>
<P><STRONG><a name="[2f1]"></a>Call</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, m3_env.o(.text.Call))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Call
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallVL
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_RunStart
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvaluateExpression
</UL>

<P><STRONG><a name="[399]"></a>ReportNativeStackUsage</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m3_env.o(.text.ReportNativeStackUsage))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m3_CallVL
</UL>

<P><STRONG><a name="[402]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[3f5]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[41d]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[407]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[4a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2ca]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
